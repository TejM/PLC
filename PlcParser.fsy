%{
 open Absyn
 open ParAux
%}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL

/*      Nil  Bool  Int   ->     */
%token  NIL  BOOL  INT  ARROW

/*      =>      fn  end  */
%token  DARROW  FN  END

/*      var  fun  rec  */
%token  VAR  FUN  REC

/*      if  then  else  */
%token  IF  THEN  ELSE

/*      match  with  |     _          */
%token  MATCH  WITH  PIPE  UNDERSCORE

/*      !    &&   */
%token  NOT  AND

/*      ::    hd    tl    ise  */
%token  CONS  HEAD  TAIL  ISE

/*      print  */
%token  PRINT

/*      +     -      *      /     */
%token  PLUS  MINUS  TIMES  DIV

/*      =   !=   <   <=   */
%token  EQ  NEQ  LT  LTE

/*      (     )     {       }       [       ]       */
%token  LPAR  RPAR  LBRACE  RBRACE  LBRACK  RBRACK

/*      ,      :      ;      */
%token  COMMA  COLON  SEMIC

%token EOF


%right SEMIC ARROW
%nonassoc IF MATCH
%left ELSE
%left AND
%left EQ NEQ
%left LT LTE
%right CONS
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HEAD TAIL ISE PRINT NAME
%left LBRACK

%start Main
%type <Absyn.expr> Main Expr AtomicExpr Const
%type <Absyn.expr> AppExpr

%%

/*  Add production rules below */

Main :
    Prog EOF                      { $1                  }
;

Prog :
    Expr                          { $1                                }   
  | Decl SEMIC Prog               { match $1 with 
                                    | a, [b], _, _  -> Let (a, b, $3) 
                                    | a, [d], [b], [c] -> makeFun a b c d $3 
                                  } 
;

Decl :
    VAR NAME EQ Expr                        { $2, [$4], [], []             }                       
  | FUN NAME Args EQ Expr                   { $2, [makeAnon $3 $5], [], [] }           
  | FUN REC NAME Args COLON Type EQ Expr    { $3, [$8], [$4], [$6]         }       
;

Expr :
    AtomicExpr                   { $1                   }                  /*atomic expression*/
  | AppExpr                      { $1                   }                  /*function application*/
  | IF Expr THEN Expr ELSE Expr  { If ($2, $4, $6)      }                  /*conditional expression*/
  | MATCH Expr WITH MatchExpr    { Match ($2, $4)       }                  /*match expression*/
  | NOT Expr                     { Prim1 ("!", $2)      }                  /*unary operator application*/
  | MINUS Expr                   { Prim1 ("-", $2)      }
  | HEAD Expr                    { Prim1 ("head", $2)   }
  | TAIL Expr                    { Prim1 ("tail", $2)   }
  | ISE Expr                     { Prim1 ("ise", $2)    }
  | PRINT Expr                   { Prim1 ("print", $2)  }
  | Expr PLUS Expr               { Prim2 ("+", $1, $3)  }                  /*binary operator application*/
  | Expr MINUS Expr              { Prim2 ("-", $1, $3)  }
  | Expr TIMES Expr              { Prim2 ("*", $1, $3)  }
  | Expr DIV Expr                { Prim2 ("/", $1, $3)  }
  | Expr EQ Expr                 { Prim2 ("=", $1, $3)  }
  | Expr NEQ Expr                { Prim2 ("!=", $1, $3) }
  | Expr LT Expr                 { Prim2 ("<", $1, $3)  }
  | Expr LTE Expr                { Prim2 ("<=", $1, $3) }
  | Expr CONS Expr               { Prim2 ("::", $1, $3) }
  | Expr SEMIC Expr              { Prim2 (";", $1, $3)  }
  | Expr LBRACK CSTINT RBRACK    { Item ($3, $1)        }                  /*Const is Nat might need to add case for that*/
;

AtomicExpr :
    Const                               { $1             }         /*constant literal*/
  | NAME                                { Var $1         }         /*function, variable or parameter name*/
  | LBRACE Prog RBRACE                  { $2             }         /*local scope block*/
  | LPAR Expr RPAR                      { $2             }         /*parenthesized expression*/
  | LPAR Comps RPAR                     { List $2        }         /*list*/
  | FN Args DARROW Expr END             { makeAnon $2 $4 }         /*anonymous function*/
;

AppExpr :                                                          /*function application*/
    AtomicExpr AtomicExpr               { Call ($1, $2) }
  | AppExpr AtomicExpr                  { Call ($1, $2) }
;

Const :
    CSTBOOL                             { ConB ($1)    }           
  | CSTINT                              { ConI ($1)    }           
  | LPAR RPAR                           { List []      }           /*unit value*/
  | LPAR Type LBRACK RBRACK RPAR        { ESeq $2      }           /*type-annotated empty sequence*/
;

Comps :                                                            /*list components*/
    Expr COMMA Expr         { [$1; $3] }
  | Expr COMMA Comps        { $1 :: $3 }
;

MatchExpr :                                                        /*match cases*/
  /*END                                {                    }        not sure what to do for this case*/
  | PIPE CondExpr ARROW Expr MatchExpr { [($2), $4] :: [$5] }      /*the brackets are probably wrong*/
;

CondExpr :                                    /*values to be matched against*/
    Expr                     { Some ($1) }    /*this might be wrong*/
  | UNDERSCORE               { None      }    /*in 4.2 of pdf _ is None*/
;

Args:
    LPAR RPAR           { []   }
  | LPAR Params RPAR    { $2   }      
;

Params:
    TypedVar                 { $1 :: [] } 
  | TypedVar COMMA Params    { $1 :: $3 } 
;

TypedVar:
    Type NAME  { ($1, $2) } 
;

Type :
    AtomicType               { $1            }
  | LPAR Types RPAR          { ListT ($2)    }                 /*list type*/
  | LBRACK Type RBRACK       { SeqT ($2)     }                 /*sequence type*/
  | Type ARROW Type          { FunT ($1, $2) }                 /*function type*/
;

AtomicType :
    NIL                 { ListT [] }                     /*Nil type*/
  | BOOL                { BoolT    }                     /*Boolean type*/
  | INT                 { IntT     }                     /*integer type*/
  | LPAR Type RPAR      { $2       }
;

Types :
    Type COMMA Type         { [$1; $3] }
  | Type COMMA Types        { $1 :: $3 }
;