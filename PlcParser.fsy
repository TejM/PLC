%{
 open Absyn
 open ParAux
%}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL

/*      Nil  Bool  Int   ->     */
%token  NIL  BOOL  INT  ARROW

/*      =>      fn  end  */
%token  DARROW  FN  END

/*      var  fun  rec  */
%token  VAR  FUN  REC

/*      if  then  else  */
%token  IF  THEN  ELSE

/*      match  with  |     _          */
%token  MATCH  WITH  PIPE  UNDERSCORE

/*      !    &&   */
%token  NOT  AND

/*      ::    hd    tl    ise  */
%token  CONS  HEAD  TAIL  ISE

/*      print  */
%token  PRINT

/*      +     -      *      /     */
%token  PLUS  MINUS  TIMES  DIV

/*      =   !=   <   <=   */
%token  EQ  NEQ  LT  LTE

/*      (     )     {       }       [       ]       */
%token  LPAR  RPAR  LBRACE  RBRACE  LBRACK  RBRACK

/*      ,      :      ;      */
%token  COMMA  COLON  SEMIC

%token EOF


%right SEMIC ARROW
%nonassoc IF MATCH
%left ELSE
%left AND
%left EQ NEQ
%left LT LTE
%right CONS
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HEAD TAIL ISE PRINT NAME
%left LBRACK

%start Main
%type <Absyn.expr> Main

%%

/*  Add production rules below */

Prog :
    Expr                         { $1 }
  | Decl SEMIC Prog
;

Decl :
    VAR NAME EQ Expr                        { }     Probably need to use functions in PlcParser for these
  | FUN NAME Args EQ Expr                   { Let ($2, $3, $5) }              not sure this is right
  | FUN REC NAME Args COLON Type EQ Expr    { Letrec (?, ?, ?, ?, ?, ?) }     has 6 arguments in absyn
;

Expr :
    AtomicExpr                   { $1              }                       atomic expression
  | AppExpr                      { $1              }                       function application
  | IF Expr THEN Expr ELSE Expr  { If ($2, $4, $6) }                       conditional expression
  | MATCH Expr WITH MatchExpr    { Match ($2, $4)  }                       match expression
  | NOT Expr                     { Prim1 ("!", $2) }                       unary operator application
  | MINUS Expr                   { Prim1 ("-", $2) }
  | HEAD Expr
  | TAIL Expr
  | ISE Expr
  | PRINT Expr
  | Expr PLUS Expr               { Prim2 ("+", $1, $3)  }                  binary operator application
  | Expr MINUS Expr              { Prim2 ("-", $1, $3)  }
  | Expr TIMES Expr              { Prim2 ("*", $1, $3)  }
  | Expr DIV Expr                { Prim2 ("/", $1, $3)  }
  | Expr EQ Expr                 { Prim2 ("=", $1, $3)  }
  | Expr NEQ Expr                { Prim2 ("!=", $1, $3) }
  | Expr LT Expr                 { Prim2 ("<", $1, $3)  }
  | Expr LTE Expr                { Prim2 ("<=", $1, $3) }
  | Expr CONS Expr
  | Expr SEMIC Expr
  | Expr LBRACK Const RBRACK     { Item ($1, $3) }                         Const is Nat might need to add case for that
;

AtomicExpr :
    Const                               { $1             }       constant literal
  | NAME                                { Var $1         }       function, variable or parameter name
  | LBRACK Prog RBRACK                  {                }       local scope block
  | LPAR Expr RPAR                      {                }       parenthesized expression
  | LPAR Comps RPAR                     { List $2        }       list
  | FN Args DARROW Expr END             { makeAnon $2 $4 }       anonymous function
;

AppExpr :                                                          function application
    AtomicExpr AtomicExpr               { Call ($1, $2) }
  | AppExpr AtomicExpr                  { Call ($1, $2) }
;

Const :
    CSTBOOL                             { ConB ($1)    }           combined true and false which I think is fine
  | CSTINT                              { ConI ($1)    }           numerals NAT? need to add NAT to parser or is it CSTINT?
  | LPAR RPAR                           { List []      }           unit value
  | LPAR Type LBRACK RBRACK RPAR        { ESeq ($2 []) }           type-annotated empty sequence
;

Comps :                                       list components
    Expr COMMA Expr         { [$1; $3] }
  | Expr COMMA Comps        { $1 :: $3 }
;

MatchExpr :                                   match cases
    END 
  | PIPE CondExpr ARROW Expr MatchExpr
;

CondExpr :                                    values to be matched against
    EXPR                     { $1 }           this might be wrong
  | UNDERSCORE
;

Args:                                         function arguments
    LPAR RPAR                { []       }     imported directly from hw6 might need to change
  | Arg                      { [$1]     }
  | Arg COMMA Args           { $1 :: $3 }
  | LPAR Arg COMMA Args RPAR { $2 :: $4 }
  | LPAR Arg RPAR            { [$2]     }
;

Arg:
    Type NAME                { $1, $2 }
;

Type :
    AtomicType
  | LPAR Types RPAR          { ListT ($2)    }                 list type
  | LBRACK Type RBRACK       { SeqT ($2)     }                 sequence type
  | Type ARROW Type          { FunT ($1, $2) }                 function type
;

AtomicType :
    NIL                 { ListT [] }                     Nil type
  | BOOL                { BoolT    }                     Boolean type
  | INT                 { IntT     }                     integer type
  | LPAR Type RPAR      { $2       }
;

Types :
    Type COMMA Type         { [$1; $3] }
  | Type COMMA Types        { $1 :: $3 }                 might need to make $3 -> [$3];