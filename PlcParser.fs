// Implementation file for parser generated by fsyacc
module PlcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PlcParser.fsy"

 open Absyn
 open ParAux

# 11 "PlcParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | COLON
  | SEMIC
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | EQ
  | NEQ
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | PRINT
  | CONS
  | HEAD
  | TAIL
  | ISE
  | NOT
  | AND
  | MATCH
  | WITH
  | PIPE
  | UNDERSCORE
  | IF
  | THEN
  | ELSE
  | VAR
  | FUN
  | REC
  | DARROW
  | FN
  | END
  | NIL
  | BOOL
  | INT
  | ARROW
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMIC
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PRINT
    | TOKEN_CONS
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_ISE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_PIPE
    | TOKEN_UNDERSCORE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_DARROW
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_NIL
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_ARROW
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_Decl
    | NONTERM_Expr
    | NONTERM_AtomicExpr
    | NONTERM_AppExpr
    | NONTERM_Const
    | NONTERM_Comps
    | NONTERM_MatchExpr
    | NONTERM_CondExpr
    | NONTERM_Args
    | NONTERM_Params
    | NONTERM_TypedVar
    | NONTERM_Type
    | NONTERM_AtomicType
    | NONTERM_Types

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | COLON  -> 2 
  | SEMIC  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | LBRACE  -> 6 
  | RBRACE  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | EQ  -> 10 
  | NEQ  -> 11 
  | LT  -> 12 
  | LTE  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | TIMES  -> 16 
  | DIV  -> 17 
  | PRINT  -> 18 
  | CONS  -> 19 
  | HEAD  -> 20 
  | TAIL  -> 21 
  | ISE  -> 22 
  | NOT  -> 23 
  | AND  -> 24 
  | MATCH  -> 25 
  | WITH  -> 26 
  | PIPE  -> 27 
  | UNDERSCORE  -> 28 
  | IF  -> 29 
  | THEN  -> 30 
  | ELSE  -> 31 
  | VAR  -> 32 
  | FUN  -> 33 
  | REC  -> 34 
  | DARROW  -> 35 
  | FN  -> 36 
  | END  -> 37 
  | NIL  -> 38 
  | BOOL  -> 39 
  | INT  -> 40 
  | ARROW  -> 41 
  | CSTBOOL _ -> 42 
  | NAME _ -> 43 
  | CSTINT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_COLON 
  | 3 -> TOKEN_SEMIC 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_LBRACE 
  | 7 -> TOKEN_RBRACE 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_NEQ 
  | 12 -> TOKEN_LT 
  | 13 -> TOKEN_LTE 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIV 
  | 18 -> TOKEN_PRINT 
  | 19 -> TOKEN_CONS 
  | 20 -> TOKEN_HEAD 
  | 21 -> TOKEN_TAIL 
  | 22 -> TOKEN_ISE 
  | 23 -> TOKEN_NOT 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_MATCH 
  | 26 -> TOKEN_WITH 
  | 27 -> TOKEN_PIPE 
  | 28 -> TOKEN_UNDERSCORE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_THEN 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_VAR 
  | 33 -> TOKEN_FUN 
  | 34 -> TOKEN_REC 
  | 35 -> TOKEN_DARROW 
  | 36 -> TOKEN_FN 
  | 37 -> TOKEN_END 
  | 38 -> TOKEN_NIL 
  | 39 -> TOKEN_BOOL 
  | 40 -> TOKEN_INT 
  | 41 -> TOKEN_ARROW 
  | 42 -> TOKEN_CSTBOOL 
  | 43 -> TOKEN_NAME 
  | 44 -> TOKEN_CSTINT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_Decl 
    | 5 -> NONTERM_Decl 
    | 6 -> NONTERM_Decl 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_AtomicExpr 
    | 29 -> NONTERM_AtomicExpr 
    | 30 -> NONTERM_AtomicExpr 
    | 31 -> NONTERM_AtomicExpr 
    | 32 -> NONTERM_AtomicExpr 
    | 33 -> NONTERM_AtomicExpr 
    | 34 -> NONTERM_AppExpr 
    | 35 -> NONTERM_AppExpr 
    | 36 -> NONTERM_Const 
    | 37 -> NONTERM_Const 
    | 38 -> NONTERM_Const 
    | 39 -> NONTERM_Const 
    | 40 -> NONTERM_Comps 
    | 41 -> NONTERM_Comps 
    | 42 -> NONTERM_MatchExpr 
    | 43 -> NONTERM_CondExpr 
    | 44 -> NONTERM_CondExpr 
    | 45 -> NONTERM_Args 
    | 46 -> NONTERM_Args 
    | 47 -> NONTERM_Params 
    | 48 -> NONTERM_Params 
    | 49 -> NONTERM_TypedVar 
    | 50 -> NONTERM_Type 
    | 51 -> NONTERM_Type 
    | 52 -> NONTERM_Type 
    | 53 -> NONTERM_Type 
    | 54 -> NONTERM_AtomicType 
    | 55 -> NONTERM_AtomicType 
    | 56 -> NONTERM_AtomicType 
    | 57 -> NONTERM_AtomicType 
    | 58 -> NONTERM_Types 
    | 59 -> NONTERM_Types 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMIC  -> "SEMIC" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PRINT  -> "PRINT" 
  | CONS  -> "CONS" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | ISE  -> "ISE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | PIPE  -> "PIPE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | DARROW  -> "DARROW" 
  | FN  -> "FN" 
  | END  -> "END" 
  | NIL  -> "NIL" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | ARROW  -> "ARROW" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMIC  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 6us; 7us; 78us; 79us; 3us; 65535us; 0us; 5us; 6us; 5us; 78us; 5us; 32us; 65535us; 0us; 4us; 6us; 4us; 10us; 11us; 15us; 16us; 22us; 23us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 63us; 48us; 64us; 49us; 65us; 50us; 66us; 51us; 67us; 52us; 68us; 53us; 69us; 54us; 70us; 55us; 71us; 56us; 72us; 57us; 78us; 4us; 81us; 58us; 82us; 58us; 88us; 59us; 100us; 60us; 102us; 62us; 104us; 61us; 34us; 65535us; 0us; 24us; 6us; 24us; 10us; 24us; 15us; 24us; 22us; 24us; 24us; 90us; 25us; 91us; 26us; 24us; 28us; 24us; 30us; 24us; 32us; 24us; 36us; 24us; 38us; 24us; 40us; 24us; 42us; 24us; 44us; 24us; 46us; 24us; 63us; 24us; 64us; 24us; 65us; 24us; 66us; 24us; 67us; 24us; 68us; 24us; 69us; 24us; 70us; 24us; 71us; 24us; 72us; 24us; 78us; 24us; 81us; 24us; 82us; 24us; 88us; 24us; 100us; 24us; 102us; 24us; 104us; 24us; 32us; 65535us; 0us; 25us; 6us; 25us; 10us; 25us; 15us; 25us; 22us; 25us; 26us; 25us; 28us; 25us; 30us; 25us; 32us; 25us; 36us; 25us; 38us; 25us; 40us; 25us; 42us; 25us; 44us; 25us; 46us; 25us; 63us; 25us; 64us; 25us; 65us; 25us; 66us; 25us; 67us; 25us; 68us; 25us; 69us; 25us; 70us; 25us; 71us; 25us; 72us; 25us; 78us; 25us; 81us; 25us; 82us; 25us; 88us; 25us; 100us; 25us; 102us; 25us; 104us; 25us; 34us; 65535us; 0us; 76us; 6us; 76us; 10us; 76us; 15us; 76us; 22us; 76us; 24us; 76us; 25us; 76us; 26us; 76us; 28us; 76us; 30us; 76us; 32us; 76us; 36us; 76us; 38us; 76us; 40us; 76us; 42us; 76us; 44us; 76us; 46us; 76us; 63us; 76us; 64us; 76us; 65us; 76us; 66us; 76us; 67us; 76us; 68us; 76us; 69us; 76us; 70us; 76us; 71us; 76us; 72us; 76us; 78us; 76us; 81us; 76us; 82us; 76us; 88us; 76us; 100us; 76us; 102us; 76us; 104us; 76us; 3us; 65535us; 81us; 84us; 82us; 84us; 100us; 101us; 2us; 65535us; 34us; 35us; 61us; 105us; 1us; 65535us; 102us; 103us; 3us; 65535us; 13us; 14us; 18us; 19us; 86us; 87us; 2us; 65535us; 107us; 109us; 112us; 113us; 2us; 65535us; 107us; 111us; 112us; 111us; 9us; 65535us; 20us; 21us; 81us; 95us; 82us; 96us; 107us; 114us; 112us; 114us; 117us; 124us; 120us; 121us; 126us; 123us; 131us; 125us; 9us; 65535us; 20us; 116us; 81us; 116us; 82us; 116us; 107us; 116us; 112us; 116us; 117us; 116us; 120us; 116us; 126us; 116us; 131us; 116us; 3us; 65535us; 82us; 118us; 117us; 118us; 131us; 132us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 44us; 79us; 112us; 147us; 151us; 154us; 156us; 160us; 163us; 166us; 176us; 186us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 12us; 2us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 12us; 4us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 5us; 12us; 5us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 53us; 1us; 6us; 12us; 6us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 2us; 7us; 34us; 2us; 8us; 35us; 1us; 9us; 12us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 9us; 12us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 9us; 12us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 10us; 12us; 10us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 10us; 1us; 10us; 1us; 11us; 12us; 11us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 12us; 12us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 13us; 12us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 14us; 12us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 15us; 12us; 15us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 16us; 12us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 31us; 40us; 41us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 33us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 40us; 40us; 41us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 42us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 43us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 4us; 31us; 32us; 38us; 39us; 6us; 31us; 32us; 38us; 39us; 51us; 57us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 2us; 39us; 53us; 5us; 39us; 53us; 57us; 58us; 59us; 1us; 39us; 1us; 39us; 1us; 39us; 2us; 40us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 44us; 2us; 45us; 46us; 1us; 45us; 1us; 46us; 1us; 46us; 2us; 47us; 48us; 1us; 48us; 1us; 48us; 2us; 49us; 53us; 1us; 49us; 1us; 50us; 2us; 51us; 57us; 1us; 51us; 1us; 51us; 1us; 52us; 2us; 52us; 53us; 1us; 52us; 2us; 53us; 53us; 4us; 53us; 57us; 58us; 59us; 4us; 53us; 58us; 58us; 59us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 2us; 58us; 59us; 1us; 59us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 46us; 49us; 51us; 53us; 55us; 68us; 70us; 72us; 74us; 76us; 79us; 81us; 94us; 97us; 100us; 102us; 115us; 117us; 130us; 132us; 145us; 147us; 160us; 162us; 164us; 166us; 179us; 181us; 194us; 196us; 209us; 211us; 224us; 226us; 239us; 241us; 254us; 267us; 280us; 293us; 306us; 319us; 332us; 345us; 358us; 371us; 384us; 399us; 412us; 427us; 440us; 453us; 455us; 457us; 459us; 461us; 463us; 465us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 483us; 485us; 487us; 489us; 494us; 501us; 503us; 505us; 507us; 509us; 511us; 513us; 515us; 517us; 519us; 521us; 523us; 525us; 528us; 534us; 536us; 538us; 540us; 543us; 545us; 547us; 549us; 551us; 553us; 555us; 558us; 560us; 562us; 564us; 567us; 569us; 571us; 574us; 576us; 578us; 581us; 583us; 585us; 587us; 590us; 592us; 595us; 600us; 605us; 607us; 609us; 611us; 613us; 615us; 618us; |]
let _fsyacc_action_rows = 133
let _fsyacc_actionTableElements = [|16us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 32us; 8us; 33us; 12us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 11us; 16386us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 1us; 32768us; 3us; 6us; 16us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 32us; 8us; 33us; 12us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 0us; 16387us; 1us; 32768us; 43us; 9us; 1us; 32768us; 10us; 10us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 10us; 16388us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 2us; 32768us; 34us; 17us; 43us; 13us; 1us; 32768us; 4us; 107us; 1us; 32768us; 10us; 15us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 10us; 16389us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 1us; 32768us; 43us; 18us; 1us; 32768us; 4us; 107us; 1us; 32768us; 2us; 20us; 5us; 32768us; 4us; 117us; 8us; 120us; 38us; 127us; 39us; 128us; 40us; 129us; 2us; 32768us; 10us; 22us; 41us; 126us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 10us; 16390us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 6us; 16391us; 4us; 81us; 6us; 78us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 6us; 16392us; 4us; 81us; 6us; 78us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 12us; 32768us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 30us; 28us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 12us; 32768us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 31us; 30us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 10us; 16393us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 12us; 32768us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 26us; 34us; 1us; 32768us; 27us; 102us; 0us; 16394us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 16395us; 8us; 73us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 3us; 16396us; 8us; 73us; 16us; 65us; 17us; 66us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 16397us; 8us; 73us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 16398us; 8us; 73us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 16399us; 8us; 73us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 16400us; 8us; 73us; 3us; 16401us; 8us; 73us; 16us; 65us; 17us; 66us; 3us; 16402us; 8us; 73us; 16us; 65us; 17us; 66us; 1us; 16403us; 8us; 73us; 1us; 16404us; 8us; 73us; 8us; 16405us; 8us; 73us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 8us; 16406us; 8us; 73us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 6us; 16407us; 8us; 73us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 6us; 16408us; 8us; 73us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 6us; 16409us; 8us; 73us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 11us; 16410us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 13us; 32768us; 1us; 100us; 3us; 72us; 5us; 83us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 12us; 32768us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 37us; 89us; 12us; 16424us; 1us; 100us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 12us; 32768us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 27us; 102us; 11us; 16427us; 3us; 72us; 8us; 73us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 14us; 63us; 15us; 64us; 16us; 65us; 17us; 66us; 19us; 71us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 32768us; 44us; 74us; 1us; 32768us; 9us; 75us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 16us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 32us; 8us; 33us; 12us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 32768us; 7us; 80us; 0us; 16414us; 19us; 32768us; 4us; 82us; 5us; 94us; 6us; 78us; 8us; 120us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 38us; 127us; 39us; 128us; 40us; 129us; 42us; 92us; 43us; 77us; 44us; 93us; 19us; 32768us; 4us; 82us; 5us; 94us; 6us; 78us; 8us; 120us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 38us; 127us; 39us; 128us; 40us; 129us; 42us; 92us; 43us; 77us; 44us; 93us; 0us; 16415us; 1us; 32768us; 5us; 85us; 0us; 16416us; 1us; 32768us; 4us; 107us; 1us; 32768us; 35us; 88us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 2us; 32768us; 8us; 97us; 41us; 126us; 4us; 32768us; 1us; 131us; 5us; 130us; 8us; 97us; 41us; 126us; 1us; 32768us; 9us; 98us; 1us; 32768us; 5us; 99us; 0us; 16423us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 0us; 16425us; 15us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 28us; 106us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 1us; 32768us; 41us; 104us; 14us; 32768us; 4us; 81us; 6us; 78us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 86us; 42us; 92us; 43us; 77us; 44us; 93us; 0us; 16426us; 0us; 16428us; 6us; 32768us; 4us; 117us; 5us; 108us; 8us; 120us; 38us; 127us; 39us; 128us; 40us; 129us; 0us; 16429us; 1us; 32768us; 5us; 110us; 0us; 16430us; 1us; 16431us; 1us; 112us; 5us; 32768us; 4us; 117us; 8us; 120us; 38us; 127us; 39us; 128us; 40us; 129us; 0us; 16432us; 2us; 32768us; 41us; 126us; 43us; 115us; 0us; 16433us; 0us; 16434us; 5us; 32768us; 4us; 117us; 8us; 120us; 38us; 127us; 39us; 128us; 40us; 129us; 1us; 32768us; 5us; 119us; 0us; 16435us; 5us; 32768us; 4us; 117us; 8us; 120us; 38us; 127us; 39us; 128us; 40us; 129us; 2us; 32768us; 9us; 122us; 41us; 126us; 0us; 16436us; 1us; 16437us; 41us; 126us; 3us; 32768us; 1us; 131us; 5us; 130us; 41us; 126us; 2us; 16442us; 1us; 131us; 41us; 126us; 5us; 32768us; 4us; 117us; 8us; 120us; 38us; 127us; 39us; 128us; 40us; 129us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 5us; 32768us; 4us; 117us; 8us; 120us; 38us; 127us; 39us; 128us; 40us; 129us; 0us; 16443us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 20us; 21us; 33us; 35us; 52us; 53us; 55us; 57us; 72us; 83us; 86us; 88us; 90us; 105us; 116us; 118us; 120us; 122us; 128us; 131us; 146us; 157us; 164us; 171us; 186us; 199us; 214us; 227us; 242us; 253us; 268us; 281us; 283us; 284us; 299us; 301us; 316us; 320us; 335us; 337us; 352us; 354us; 369us; 371us; 386us; 388us; 392us; 396us; 398us; 400us; 409us; 418us; 425us; 432us; 439us; 451us; 465us; 478us; 491us; 504us; 516us; 531us; 546us; 561us; 576us; 591us; 606us; 621us; 636us; 651us; 666us; 668us; 670us; 671us; 672us; 673us; 690us; 692us; 693us; 713us; 733us; 734us; 736us; 737us; 739us; 741us; 756us; 757us; 758us; 759us; 760us; 761us; 762us; 765us; 770us; 772us; 774us; 775us; 790us; 791us; 807us; 809us; 824us; 825us; 826us; 833us; 834us; 836us; 837us; 839us; 845us; 846us; 849us; 850us; 851us; 857us; 859us; 860us; 866us; 869us; 870us; 872us; 876us; 879us; 885us; 886us; 887us; 888us; 889us; 895us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 4us; 5us; 8us; 1us; 1us; 6us; 4us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 1us; 1us; 3us; 3us; 3us; 5us; 2us; 2us; 1us; 1us; 2us; 5us; 3us; 3us; 5us; 1us; 1us; 2us; 3us; 1us; 3us; 2us; 1us; 3us; 3us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 16us; 16us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 16416us; 65535us; 65535us; 65535us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 16425us; 65535us; 65535us; 65535us; 16426us; 16428us; 65535us; 16429us; 65535us; 16430us; 65535us; 65535us; 16432us; 65535us; 16433us; 16434us; 65535us; 65535us; 16435us; 65535us; 65535us; 16436us; 65535us; 65535us; 65535us; 65535us; 16438us; 16439us; 16440us; 16441us; 65535us; 16443us; |]
let _fsyacc_reductions ()  =    [| 
# 405 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 414 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "PlcParser.fsy"
                                                         _1                  
                   )
# 70 "PlcParser.fsy"
                 : Absyn.expr));
# 425 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "PlcParser.fsy"
                                                         _1                                
                   )
# 74 "PlcParser.fsy"
                 : 'Prog));
# 436 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "PlcParser.fsy"
                                                         match _1 with 
                                                         | a, [b], _, _  -> Let (a, b, _3) 
                                                         | a, [d], [b], [c] -> makeFun a b c d _3 
                                                       
                   )
# 75 "PlcParser.fsy"
                 : 'Prog));
# 451 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "PlcParser.fsy"
                                                                   _2, [_4], [], []             
                   )
# 82 "PlcParser.fsy"
                 : 'Decl));
# 463 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "PlcParser.fsy"
                                                                   _2, [makeAnon _3 _5], [], [] 
                   )
# 83 "PlcParser.fsy"
                 : 'Decl));
# 476 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "PlcParser.fsy"
                                                                   _3, [_8], [_4], [_6]         
                   )
# 84 "PlcParser.fsy"
                 : 'Decl));
# 490 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PlcParser.fsy"
                                                        _1                   
                   )
# 88 "PlcParser.fsy"
                 : Absyn.expr));
# 501 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PlcParser.fsy"
                                                        _1                   
                   )
# 89 "PlcParser.fsy"
                 : Absyn.expr));
# 512 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "PlcParser.fsy"
                                                        If (_2, _4, _6)      
                   )
# 90 "PlcParser.fsy"
                 : Absyn.expr));
# 525 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'MatchExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "PlcParser.fsy"
                                                        Match (_2, _4)       
                   )
# 91 "PlcParser.fsy"
                 : Absyn.expr));
# 537 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PlcParser.fsy"
                                                        Prim1 ("!", _2)      
                   )
# 92 "PlcParser.fsy"
                 : Absyn.expr));
# 548 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PlcParser.fsy"
                                                        Prim1 ("-", _2)      
                   )
# 93 "PlcParser.fsy"
                 : Absyn.expr));
# 559 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "PlcParser.fsy"
                                                        Prim1 ("head", _2)   
                   )
# 94 "PlcParser.fsy"
                 : Absyn.expr));
# 570 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "PlcParser.fsy"
                                                        Prim1 ("tail", _2)   
                   )
# 95 "PlcParser.fsy"
                 : Absyn.expr));
# 581 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "PlcParser.fsy"
                                                        Prim1 ("ise", _2)    
                   )
# 96 "PlcParser.fsy"
                 : Absyn.expr));
# 592 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "PlcParser.fsy"
                                                        Prim1 ("print", _2)  
                   )
# 97 "PlcParser.fsy"
                 : Absyn.expr));
# 603 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "PlcParser.fsy"
                                                        Prim2 ("+", _1, _3)  
                   )
# 98 "PlcParser.fsy"
                 : Absyn.expr));
# 615 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PlcParser.fsy"
                                                        Prim2 ("-", _1, _3)  
                   )
# 99 "PlcParser.fsy"
                 : Absyn.expr));
# 627 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PlcParser.fsy"
                                                        Prim2 ("*", _1, _3)  
                   )
# 100 "PlcParser.fsy"
                 : Absyn.expr));
# 639 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PlcParser.fsy"
                                                        Prim2 ("/", _1, _3)  
                   )
# 101 "PlcParser.fsy"
                 : Absyn.expr));
# 651 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "PlcParser.fsy"
                                                        Prim2 ("=", _1, _3)  
                   )
# 102 "PlcParser.fsy"
                 : Absyn.expr));
# 663 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "PlcParser.fsy"
                                                        Prim2 ("!=", _1, _3) 
                   )
# 103 "PlcParser.fsy"
                 : Absyn.expr));
# 675 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "PlcParser.fsy"
                                                        Prim2 ("<", _1, _3)  
                   )
# 104 "PlcParser.fsy"
                 : Absyn.expr));
# 687 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "PlcParser.fsy"
                                                        Prim2 ("<=", _1, _3) 
                   )
# 105 "PlcParser.fsy"
                 : Absyn.expr));
# 699 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "PlcParser.fsy"
                                                        Prim2 ("::", _1, _3) 
                   )
# 106 "PlcParser.fsy"
                 : Absyn.expr));
# 711 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "PlcParser.fsy"
                                                        Prim2 (";", _1, _3)  
                   )
# 107 "PlcParser.fsy"
                 : Absyn.expr));
# 723 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "PlcParser.fsy"
                                                        Item (_3, _1)        
                   )
# 108 "PlcParser.fsy"
                 : Absyn.expr));
# 735 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "PlcParser.fsy"
                                                               _1             
                   )
# 112 "PlcParser.fsy"
                 : Absyn.expr));
# 746 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "PlcParser.fsy"
                                                               Var _1         
                   )
# 113 "PlcParser.fsy"
                 : Absyn.expr));
# 757 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "PlcParser.fsy"
                                                               _2             
                   )
# 114 "PlcParser.fsy"
                 : Absyn.expr));
# 768 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "PlcParser.fsy"
                                                               _2             
                   )
# 115 "PlcParser.fsy"
                 : Absyn.expr));
# 779 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "PlcParser.fsy"
                                                               List _2        
                   )
# 116 "PlcParser.fsy"
                 : Absyn.expr));
# 790 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "PlcParser.fsy"
                                                               makeAnon _2 _4 
                   )
# 117 "PlcParser.fsy"
                 : Absyn.expr));
# 802 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "PlcParser.fsy"
                                                               Call (_1, _2) 
                   )
# 121 "PlcParser.fsy"
                 : Absyn.expr));
# 814 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "PlcParser.fsy"
                                                               Call (_1, _2) 
                   )
# 122 "PlcParser.fsy"
                 : Absyn.expr));
# 826 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "PlcParser.fsy"
                                                               ConB (_1)    
                   )
# 126 "PlcParser.fsy"
                 : Absyn.expr));
# 837 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "PlcParser.fsy"
                                                               ConI (_1)    
                   )
# 127 "PlcParser.fsy"
                 : Absyn.expr));
# 848 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "PlcParser.fsy"
                                                               List []      
                   )
# 128 "PlcParser.fsy"
                 : Absyn.expr));
# 858 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "PlcParser.fsy"
                                                               ESeq _2      
                   )
# 129 "PlcParser.fsy"
                 : Absyn.expr));
# 869 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "PlcParser.fsy"
                                                   [_1; _3] 
                   )
# 133 "PlcParser.fsy"
                 : 'Comps));
# 881 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "PlcParser.fsy"
                                                   _1 :: _3 
                   )
# 134 "PlcParser.fsy"
                 : 'Comps));
# 893 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CondExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'MatchExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "PlcParser.fsy"
                                                              [(_2), _4] :: [_5] 
                   )
# 139 "PlcParser.fsy"
                 : 'MatchExpr));
# 906 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "PlcParser.fsy"
                                                    Some (_1) 
                   )
# 143 "PlcParser.fsy"
                 : 'CondExpr));
# 917 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "PlcParser.fsy"
                                                    None      
                   )
# 144 "PlcParser.fsy"
                 : 'CondExpr));
# 927 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "PlcParser.fsy"
                                               []   
                   )
# 148 "PlcParser.fsy"
                 : 'Args));
# 937 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "PlcParser.fsy"
                                               _2   
                   )
# 149 "PlcParser.fsy"
                 : 'Args));
# 948 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "PlcParser.fsy"
                                                    _1 :: [] 
                   )
# 153 "PlcParser.fsy"
                 : 'Params));
# 959 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "PlcParser.fsy"
                                                    _1 :: _3 
                   )
# 154 "PlcParser.fsy"
                 : 'Params));
# 971 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "PlcParser.fsy"
                                      (_1, _2) 
                   )
# 158 "PlcParser.fsy"
                 : 'TypedVar));
# 983 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "PlcParser.fsy"
                                                    _1            
                   )
# 162 "PlcParser.fsy"
                 : 'Type));
# 994 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "PlcParser.fsy"
                                                    ListT (_2)    
                   )
# 163 "PlcParser.fsy"
                 : 'Type));
# 1005 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "PlcParser.fsy"
                                                    SeqT (_2)     
                   )
# 164 "PlcParser.fsy"
                 : 'Type));
# 1016 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "PlcParser.fsy"
                                                    FunT (_1, _2) 
                   )
# 165 "PlcParser.fsy"
                 : 'Type));
# 1028 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "PlcParser.fsy"
                                               ListT [] 
                   )
# 169 "PlcParser.fsy"
                 : 'AtomicType));
# 1038 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "PlcParser.fsy"
                                               BoolT    
                   )
# 170 "PlcParser.fsy"
                 : 'AtomicType));
# 1048 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "PlcParser.fsy"
                                               IntT     
                   )
# 171 "PlcParser.fsy"
                 : 'AtomicType));
# 1058 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "PlcParser.fsy"
                                               _2       
                   )
# 172 "PlcParser.fsy"
                 : 'AtomicType));
# 1069 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "PlcParser.fsy"
                                                   [_1; _3] 
                   )
# 176 "PlcParser.fsy"
                 : 'Types));
# 1081 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "PlcParser.fsy"
                                                   _1 :: _3 
                   )
# 177 "PlcParser.fsy"
                 : 'Types));
|]
# 1094 "PlcParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
