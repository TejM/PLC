%{
 open Absyn
 open ParAux
%}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL

/*      Nil  Bool  Int   ->     */
%token  NIL  BOOL  INT  ARROW

/*      =>      fn  end  */
%token  DARROW  FN  END

/*      var  fun  rec  */
%token  VAR  FUN  REC

/*      if  then  else  */
%token  IF  THEN  ELSE

/*      match  with  |     _          */
%token  MATCH  WITH  PIPE  UNDERSCORE

/*      !    &&   */
%token  NOT  AND

/*      ::    hd    tl    ise  */
%token  CONS  HEAD  TAIL  ISE

/*      print  */
%token  PRINT

/*      +     -      *      /     */
%token  PLUS  MINUS  TIMES  DIV

/*      =   !=   <   <=   */
%token  EQ  NEQ  LT  LTE

/*      (     )     {       }       [       ]       */
%token  LPAR  RPAR  LBRACE  RBRACE  LBRACK  RBRACK

/*      ,      :      ;      */
%token  COMMA  COLON  SEMIC

%token EOF


%right SEMIC ARROW
%nonassoc IF MATCH
%left ELSE
%left AND
%left EQ NEQ
%left LT LTE
%right CONS
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HEAD TAIL ISE PRINT NAME
%left LBRACK

%start Main
%type <Absyn.expr> Main

%%

/*  Add production rules below */
Main:
  LetExpr EOF  { $1 }
;

LetExpr:
    Expr                                         { $1                     }
  | VAR NAME EQ Expr SEMIC LetExpr               { Let ($2, $4, $6)       }
  | FUN NAME Args RetType EQ Expr SEMIC LetExpr  { makeFun $2 $3 $4 $6 $8 }
;

RetType:
  COLON Type  { $2 }
;


Args:
    LPAR RPAR                { []       }
  | Arg                      { [$1]     }
  | Arg COMMA Args           { $1 :: $3 }
  | LPAR Arg COMMA Args RPAR { $2 :: $4 }
  | LPAR Arg RPAR            { [$2]     }
;

Arg:
    Type NAME { $1, $2 }
;

Type:
    AtType              { $1       }
  | ListType            { ListT $1 }
;

AtType:
    INT             { IntT     }
  | BOOL            { BoolT    }
  | NIL             { ListT [] }
  | LPAR Type RPAR  { $2       }
;

ListType:
  | AtType COMMA AtType    { [$1; $3] }
  | AtType COMMA ListType  { $1 :: $3 }
;

Expr:
    AtExpr                       { $1                    }
  | AppExpr                      { $1                    }
  | IF Expr THEN Expr ELSE Expr  { If ($2, $4, $6)       }
  | MINUS Expr                   { Prim1 ("-", $2)       }
  | NOT   Expr                   { Prim1 ("!", $2)       }
  | Expr PLUS  Expr              { Prim2 ("+",  $1, $3)  }
  | Expr MINUS Expr              { Prim2 ("-",  $1, $3)  }
  | Expr TIMES Expr              { Prim2 ("*",  $1, $3)  }
  | Expr DIV   Expr              { Prim2 ("/",  $1, $3)  }
  | Expr EQ    Expr              { Prim2 ("=",  $1, $3)  }
  | Expr NE    Expr              { Prim2 ("<>", $1, $3)  }
  | Expr LT    Expr              { Prim2 ("<",  $1, $3)  }
  | Expr LBRACK CSTINT RBRACK    { Item ($3, $1)         }
;

AtExpr:
    Const              { $1       }
  | NAME               { Var $1   }
  | LBRA LetExpr RBRA  { $2       }
  | LPAR Expr RPAR     { $2       }
  | LPAR RPAR          { List [] }
  | LPAR Comps RPAR    { List $2 }
;

Comps:
    Expr COMMA Expr   { [$1; $3] }
  | Expr COMMA Comps  { $1 :: $3 }
;

AppExpr:
    AtExpr AtExpr   { Call ($1, $2) }
  | AppExpr AtExpr  { Call ($1, $2) }
;

Const:
    CSTINT   { CstI ($1) }
  | CSTBOOL  { CstB ($1) }
;
