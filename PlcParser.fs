// Implementation file for parser generated by fsyacc
module PlcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PlcParser.fsy"

 open Absyn
 open ParAux

# 11 "PlcParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | COLON
  | SEMIC
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | EQ
  | NEQ
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | PRINT
  | CONS
  | HEAD
  | TAIL
  | ISE
  | NOT
  | AND
  | MATCH
  | WITH
  | PIPE
  | UNDERSCORE
  | IF
  | THEN
  | ELSE
  | VAR
  | FUN
  | REC
  | DARROW
  | FN
  | END
  | NIL
  | BOOL
  | INT
  | ARROW
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMIC
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PRINT
    | TOKEN_CONS
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_ISE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_PIPE
    | TOKEN_UNDERSCORE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_DARROW
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_NIL
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_ARROW
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_Decl
    | NONTERM_Expr
    | NONTERM_AtomicExpr
    | NONTERM_AppExpr
    | NONTERM_Const
    | NONTERM_Comps
    | NONTERM_MatchExpr
    | NONTERM_CondExpr
    | NONTERM_Args
    | NONTERM_Params
    | NONTERM_TypedVar
    | NONTERM_Type
    | NONTERM_AtomicType
    | NONTERM_Types

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | COLON  -> 2 
  | SEMIC  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | LBRACE  -> 6 
  | RBRACE  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | EQ  -> 10 
  | NEQ  -> 11 
  | LT  -> 12 
  | LTE  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | TIMES  -> 16 
  | DIV  -> 17 
  | PRINT  -> 18 
  | CONS  -> 19 
  | HEAD  -> 20 
  | TAIL  -> 21 
  | ISE  -> 22 
  | NOT  -> 23 
  | AND  -> 24 
  | MATCH  -> 25 
  | WITH  -> 26 
  | PIPE  -> 27 
  | UNDERSCORE  -> 28 
  | IF  -> 29 
  | THEN  -> 30 
  | ELSE  -> 31 
  | VAR  -> 32 
  | FUN  -> 33 
  | REC  -> 34 
  | DARROW  -> 35 
  | FN  -> 36 
  | END  -> 37 
  | NIL  -> 38 
  | BOOL  -> 39 
  | INT  -> 40 
  | ARROW  -> 41 
  | CSTBOOL _ -> 42 
  | NAME _ -> 43 
  | CSTINT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_COLON 
  | 3 -> TOKEN_SEMIC 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_LBRACE 
  | 7 -> TOKEN_RBRACE 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_NEQ 
  | 12 -> TOKEN_LT 
  | 13 -> TOKEN_LTE 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIV 
  | 18 -> TOKEN_PRINT 
  | 19 -> TOKEN_CONS 
  | 20 -> TOKEN_HEAD 
  | 21 -> TOKEN_TAIL 
  | 22 -> TOKEN_ISE 
  | 23 -> TOKEN_NOT 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_MATCH 
  | 26 -> TOKEN_WITH 
  | 27 -> TOKEN_PIPE 
  | 28 -> TOKEN_UNDERSCORE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_THEN 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_VAR 
  | 33 -> TOKEN_FUN 
  | 34 -> TOKEN_REC 
  | 35 -> TOKEN_DARROW 
  | 36 -> TOKEN_FN 
  | 37 -> TOKEN_END 
  | 38 -> TOKEN_NIL 
  | 39 -> TOKEN_BOOL 
  | 40 -> TOKEN_INT 
  | 41 -> TOKEN_ARROW 
  | 42 -> TOKEN_CSTBOOL 
  | 43 -> TOKEN_NAME 
  | 44 -> TOKEN_CSTINT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_Decl 
    | 5 -> NONTERM_Decl 
    | 6 -> NONTERM_Decl 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_AtomicExpr 
    | 30 -> NONTERM_AtomicExpr 
    | 31 -> NONTERM_AtomicExpr 
    | 32 -> NONTERM_AtomicExpr 
    | 33 -> NONTERM_AtomicExpr 
    | 34 -> NONTERM_AtomicExpr 
    | 35 -> NONTERM_AppExpr 
    | 36 -> NONTERM_AppExpr 
    | 37 -> NONTERM_Const 
    | 38 -> NONTERM_Const 
    | 39 -> NONTERM_Const 
    | 40 -> NONTERM_Const 
    | 41 -> NONTERM_Comps 
    | 42 -> NONTERM_Comps 
    | 43 -> NONTERM_MatchExpr 
    | 44 -> NONTERM_MatchExpr 
    | 45 -> NONTERM_CondExpr 
    | 46 -> NONTERM_CondExpr 
    | 47 -> NONTERM_Args 
    | 48 -> NONTERM_Args 
    | 49 -> NONTERM_Params 
    | 50 -> NONTERM_Params 
    | 51 -> NONTERM_TypedVar 
    | 52 -> NONTERM_Type 
    | 53 -> NONTERM_Type 
    | 54 -> NONTERM_Type 
    | 55 -> NONTERM_Type 
    | 56 -> NONTERM_AtomicType 
    | 57 -> NONTERM_AtomicType 
    | 58 -> NONTERM_AtomicType 
    | 59 -> NONTERM_AtomicType 
    | 60 -> NONTERM_Types 
    | 61 -> NONTERM_Types 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMIC  -> "SEMIC" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PRINT  -> "PRINT" 
  | CONS  -> "CONS" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | ISE  -> "ISE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | PIPE  -> "PIPE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | DARROW  -> "DARROW" 
  | FN  -> "FN" 
  | END  -> "END" 
  | NIL  -> "NIL" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | ARROW  -> "ARROW" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMIC  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 6us; 7us; 80us; 81us; 3us; 65535us; 0us; 5us; 6us; 5us; 80us; 5us; 33us; 65535us; 0us; 4us; 6us; 4us; 10us; 11us; 15us; 16us; 22us; 23us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 64us; 48us; 65us; 49us; 66us; 50us; 67us; 51us; 68us; 52us; 69us; 53us; 70us; 54us; 71us; 55us; 72us; 56us; 73us; 57us; 74us; 58us; 80us; 4us; 83us; 59us; 84us; 59us; 90us; 60us; 102us; 61us; 105us; 63us; 107us; 62us; 35us; 65535us; 0us; 24us; 6us; 24us; 10us; 24us; 15us; 24us; 22us; 24us; 24us; 92us; 25us; 93us; 26us; 24us; 28us; 24us; 30us; 24us; 32us; 24us; 36us; 24us; 38us; 24us; 40us; 24us; 42us; 24us; 44us; 24us; 46us; 24us; 64us; 24us; 65us; 24us; 66us; 24us; 67us; 24us; 68us; 24us; 69us; 24us; 70us; 24us; 71us; 24us; 72us; 24us; 73us; 24us; 74us; 24us; 80us; 24us; 83us; 24us; 84us; 24us; 90us; 24us; 102us; 24us; 105us; 24us; 107us; 24us; 33us; 65535us; 0us; 25us; 6us; 25us; 10us; 25us; 15us; 25us; 22us; 25us; 26us; 25us; 28us; 25us; 30us; 25us; 32us; 25us; 36us; 25us; 38us; 25us; 40us; 25us; 42us; 25us; 44us; 25us; 46us; 25us; 64us; 25us; 65us; 25us; 66us; 25us; 67us; 25us; 68us; 25us; 69us; 25us; 70us; 25us; 71us; 25us; 72us; 25us; 73us; 25us; 74us; 25us; 80us; 25us; 83us; 25us; 84us; 25us; 90us; 25us; 102us; 25us; 105us; 25us; 107us; 25us; 35us; 65535us; 0us; 78us; 6us; 78us; 10us; 78us; 15us; 78us; 22us; 78us; 24us; 78us; 25us; 78us; 26us; 78us; 28us; 78us; 30us; 78us; 32us; 78us; 36us; 78us; 38us; 78us; 40us; 78us; 42us; 78us; 44us; 78us; 46us; 78us; 64us; 78us; 65us; 78us; 66us; 78us; 67us; 78us; 68us; 78us; 69us; 78us; 70us; 78us; 71us; 78us; 72us; 78us; 73us; 78us; 74us; 78us; 80us; 78us; 83us; 78us; 84us; 78us; 90us; 78us; 102us; 78us; 105us; 78us; 107us; 78us; 3us; 65535us; 83us; 86us; 84us; 86us; 102us; 103us; 2us; 65535us; 34us; 35us; 62us; 108us; 1us; 65535us; 105us; 106us; 3us; 65535us; 13us; 14us; 18us; 19us; 88us; 89us; 2us; 65535us; 110us; 112us; 115us; 116us; 2us; 65535us; 110us; 114us; 115us; 114us; 9us; 65535us; 20us; 21us; 83us; 97us; 84us; 98us; 110us; 117us; 115us; 117us; 120us; 127us; 123us; 124us; 129us; 126us; 134us; 128us; 9us; 65535us; 20us; 119us; 83us; 119us; 84us; 119us; 110us; 119us; 115us; 119us; 120us; 119us; 123us; 119us; 129us; 119us; 134us; 119us; 3us; 65535us; 84us; 121us; 120us; 121us; 134us; 135us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 45us; 81us; 115us; 151us; 155us; 158us; 160us; 164us; 167us; 170us; 180us; 190us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 13us; 2us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 13us; 4us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 5us; 13us; 5us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 55us; 1us; 6us; 13us; 6us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 2us; 7us; 35us; 2us; 8us; 36us; 1us; 9us; 13us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 9us; 13us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 9us; 13us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 10us; 13us; 10us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 10us; 1us; 10us; 1us; 11us; 13us; 11us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 12us; 13us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 13us; 13us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 14us; 13us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 15us; 13us; 15us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 16us; 13us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 28us; 15us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 32us; 41us; 42us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 34us; 15us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 41us; 41us; 42us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 44us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 45us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 4us; 32us; 33us; 39us; 40us; 6us; 32us; 33us; 39us; 40us; 53us; 59us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 2us; 40us; 55us; 5us; 40us; 55us; 59us; 60us; 61us; 1us; 40us; 1us; 40us; 1us; 40us; 2us; 41us; 42us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 46us; 2us; 47us; 48us; 1us; 47us; 1us; 48us; 1us; 48us; 2us; 49us; 50us; 1us; 50us; 1us; 50us; 2us; 51us; 55us; 1us; 51us; 1us; 52us; 2us; 53us; 59us; 1us; 53us; 1us; 53us; 1us; 54us; 2us; 54us; 55us; 1us; 54us; 2us; 55us; 55us; 4us; 55us; 59us; 60us; 61us; 4us; 55us; 60us; 60us; 61us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 2us; 60us; 61us; 1us; 61us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 48us; 51us; 53us; 55us; 57us; 71us; 73us; 75us; 77us; 79us; 82us; 84us; 98us; 101us; 104us; 106us; 120us; 122us; 136us; 138us; 152us; 154us; 168us; 170us; 172us; 174us; 188us; 190us; 204us; 206us; 220us; 222us; 236us; 238us; 252us; 254us; 268us; 282us; 296us; 310us; 324us; 338us; 352us; 366us; 380us; 394us; 408us; 422us; 438us; 452us; 468us; 482us; 496us; 498us; 500us; 502us; 504us; 506us; 508us; 510us; 512us; 514us; 516us; 518us; 520us; 522us; 524us; 526us; 528us; 530us; 532us; 534us; 539us; 546us; 548us; 550us; 552us; 554us; 556us; 558us; 560us; 562us; 564us; 566us; 568us; 570us; 573us; 579us; 581us; 583us; 585us; 588us; 590us; 592us; 594us; 596us; 598us; 600us; 602us; 605us; 607us; 609us; 611us; 614us; 616us; 618us; 621us; 623us; 625us; 628us; 630us; 632us; 634us; 637us; 639us; 642us; 647us; 652us; 654us; 656us; 658us; 660us; 662us; 665us; |]
let _fsyacc_action_rows = 136
let _fsyacc_actionTableElements = [|16us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 32us; 8us; 33us; 12us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 12us; 16386us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 1us; 32768us; 3us; 6us; 16us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 32us; 8us; 33us; 12us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 0us; 16387us; 1us; 32768us; 43us; 9us; 1us; 32768us; 10us; 10us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 11us; 16388us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 2us; 32768us; 34us; 17us; 43us; 13us; 1us; 32768us; 4us; 110us; 1us; 32768us; 10us; 15us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 11us; 16389us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 1us; 32768us; 43us; 18us; 1us; 32768us; 4us; 110us; 1us; 32768us; 2us; 20us; 5us; 32768us; 4us; 120us; 8us; 123us; 38us; 130us; 39us; 131us; 40us; 132us; 2us; 32768us; 10us; 22us; 41us; 129us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 11us; 16390us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 6us; 16391us; 4us; 83us; 6us; 80us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 6us; 16392us; 4us; 83us; 6us; 80us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 13us; 32768us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 30us; 28us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 13us; 32768us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 31us; 30us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 11us; 16393us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 13us; 32768us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 26us; 34us; 2us; 32768us; 27us; 105us; 37us; 104us; 0us; 16394us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 16395us; 8us; 75us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 3us; 16396us; 8us; 75us; 16us; 66us; 17us; 67us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 16397us; 8us; 75us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 16398us; 8us; 75us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 16399us; 8us; 75us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 16400us; 8us; 75us; 3us; 16401us; 8us; 75us; 16us; 66us; 17us; 67us; 3us; 16402us; 8us; 75us; 16us; 66us; 17us; 67us; 1us; 16403us; 8us; 75us; 1us; 16404us; 8us; 75us; 8us; 16405us; 8us; 75us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 8us; 16406us; 8us; 75us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 6us; 16407us; 8us; 75us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 6us; 16408us; 8us; 75us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 10us; 16409us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 6us; 16410us; 8us; 75us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 12us; 16411us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 14us; 32768us; 1us; 102us; 3us; 74us; 5us; 85us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 13us; 32768us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 37us; 91us; 13us; 16425us; 1us; 102us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 14us; 32768us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 27us; 105us; 37us; 104us; 12us; 16429us; 3us; 74us; 8us; 75us; 10us; 68us; 11us; 69us; 12us; 70us; 13us; 71us; 14us; 64us; 15us; 65us; 16us; 66us; 17us; 67us; 19us; 73us; 24us; 72us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 32768us; 44us; 76us; 1us; 32768us; 9us; 77us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 16us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 32us; 8us; 33us; 12us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 32768us; 7us; 82us; 0us; 16415us; 19us; 32768us; 4us; 84us; 5us; 96us; 6us; 80us; 8us; 123us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 38us; 130us; 39us; 131us; 40us; 132us; 42us; 94us; 43us; 79us; 44us; 95us; 19us; 32768us; 4us; 84us; 5us; 96us; 6us; 80us; 8us; 123us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 38us; 130us; 39us; 131us; 40us; 132us; 42us; 94us; 43us; 79us; 44us; 95us; 0us; 16416us; 1us; 32768us; 5us; 87us; 0us; 16417us; 1us; 32768us; 4us; 110us; 1us; 32768us; 35us; 90us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 2us; 32768us; 8us; 99us; 41us; 129us; 4us; 32768us; 1us; 134us; 5us; 133us; 8us; 99us; 41us; 129us; 1us; 32768us; 9us; 100us; 1us; 32768us; 5us; 101us; 0us; 16424us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 0us; 16426us; 0us; 16427us; 15us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 28us; 109us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 1us; 32768us; 41us; 107us; 14us; 32768us; 4us; 83us; 6us; 80us; 15us; 38us; 18us; 46us; 20us; 40us; 21us; 42us; 22us; 44us; 23us; 36us; 25us; 32us; 29us; 26us; 36us; 88us; 42us; 94us; 43us; 79us; 44us; 95us; 0us; 16428us; 0us; 16430us; 6us; 32768us; 4us; 120us; 5us; 111us; 8us; 123us; 38us; 130us; 39us; 131us; 40us; 132us; 0us; 16431us; 1us; 32768us; 5us; 113us; 0us; 16432us; 1us; 16433us; 1us; 115us; 5us; 32768us; 4us; 120us; 8us; 123us; 38us; 130us; 39us; 131us; 40us; 132us; 0us; 16434us; 2us; 32768us; 41us; 129us; 43us; 118us; 0us; 16435us; 0us; 16436us; 5us; 32768us; 4us; 120us; 8us; 123us; 38us; 130us; 39us; 131us; 40us; 132us; 1us; 32768us; 5us; 122us; 0us; 16437us; 5us; 32768us; 4us; 120us; 8us; 123us; 38us; 130us; 39us; 131us; 40us; 132us; 2us; 32768us; 9us; 125us; 41us; 129us; 0us; 16438us; 1us; 16439us; 41us; 129us; 3us; 32768us; 1us; 134us; 5us; 133us; 41us; 129us; 2us; 16444us; 1us; 134us; 41us; 129us; 5us; 32768us; 4us; 120us; 8us; 123us; 38us; 130us; 39us; 131us; 40us; 132us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 5us; 32768us; 4us; 120us; 8us; 123us; 38us; 130us; 39us; 131us; 40us; 132us; 0us; 16445us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 20us; 21us; 34us; 36us; 53us; 54us; 56us; 58us; 73us; 85us; 88us; 90us; 92us; 107us; 119us; 121us; 123us; 125us; 131us; 134us; 149us; 161us; 168us; 175us; 190us; 204us; 219us; 233us; 248us; 260us; 275us; 289us; 292us; 293us; 308us; 310us; 325us; 329us; 344us; 346us; 361us; 363us; 378us; 380us; 395us; 397us; 401us; 405us; 407us; 409us; 418us; 427us; 434us; 441us; 452us; 459us; 472us; 487us; 501us; 515us; 530us; 543us; 558us; 573us; 588us; 603us; 618us; 633us; 648us; 663us; 678us; 693us; 708us; 710us; 712us; 713us; 714us; 715us; 732us; 734us; 735us; 755us; 775us; 776us; 778us; 779us; 781us; 783us; 798us; 799us; 800us; 801us; 802us; 803us; 804us; 807us; 812us; 814us; 816us; 817us; 832us; 833us; 834us; 850us; 852us; 867us; 868us; 869us; 876us; 877us; 879us; 880us; 882us; 888us; 889us; 892us; 893us; 894us; 900us; 902us; 903us; 909us; 912us; 913us; 915us; 919us; 922us; 928us; 929us; 930us; 931us; 932us; 938us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 4us; 5us; 8us; 1us; 1us; 6us; 4us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 1us; 1us; 3us; 3us; 3us; 5us; 2us; 2us; 1us; 1us; 2us; 5us; 3us; 3us; 1us; 5us; 1us; 1us; 2us; 3us; 1us; 3us; 2us; 1us; 3us; 3us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 16us; 16us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 16413us; 16414us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 65535us; 65535us; 16418us; 16419us; 16420us; 16421us; 16422us; 16423us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 16426us; 16427us; 65535us; 65535us; 65535us; 16428us; 16430us; 65535us; 16431us; 65535us; 16432us; 65535us; 65535us; 16434us; 65535us; 16435us; 16436us; 65535us; 65535us; 16437us; 65535us; 65535us; 16438us; 65535us; 65535us; 65535us; 65535us; 16440us; 16441us; 16442us; 16443us; 65535us; 16445us; |]
let _fsyacc_reductions ()  =    [| 
# 407 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 416 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "PlcParser.fsy"
                                                         _1                  
                   )
# 70 "PlcParser.fsy"
                 : Absyn.expr));
# 427 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "PlcParser.fsy"
                                                         _1                                
                   )
# 74 "PlcParser.fsy"
                 : 'Prog));
# 438 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "PlcParser.fsy"
                                                         match _1 with 
                                                         | a, [b], [], []  -> Let (a, b, _3) 
                                                         | a, [d], [b], [c] -> makeFun a b c d _3 
                                                       
                   )
# 75 "PlcParser.fsy"
                 : 'Prog));
# 453 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "PlcParser.fsy"
                                                                   _2, [_4], [], []             
                   )
# 82 "PlcParser.fsy"
                 : 'Decl));
# 465 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "PlcParser.fsy"
                                                                   _2, [makeAnon _3 _5], [], [] 
                   )
# 83 "PlcParser.fsy"
                 : 'Decl));
# 478 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "PlcParser.fsy"
                                                                   _3, [_8], [_4], [_6]         
                   )
# 84 "PlcParser.fsy"
                 : 'Decl));
# 492 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PlcParser.fsy"
                                                        _1                   
                   )
# 88 "PlcParser.fsy"
                 : Absyn.expr));
# 503 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PlcParser.fsy"
                                                        _1                   
                   )
# 89 "PlcParser.fsy"
                 : Absyn.expr));
# 514 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "PlcParser.fsy"
                                                        If (_2, _4, _6)      
                   )
# 90 "PlcParser.fsy"
                 : Absyn.expr));
# 527 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'MatchExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "PlcParser.fsy"
                                                        Match (_2, _4)       
                   )
# 91 "PlcParser.fsy"
                 : Absyn.expr));
# 539 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PlcParser.fsy"
                                                        Prim1 ("!", _2)      
                   )
# 92 "PlcParser.fsy"
                 : Absyn.expr));
# 550 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PlcParser.fsy"
                                                        Prim1 ("-", _2)      
                   )
# 93 "PlcParser.fsy"
                 : Absyn.expr));
# 561 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "PlcParser.fsy"
                                                        Prim1 ("hd", _2)   
                   )
# 94 "PlcParser.fsy"
                 : Absyn.expr));
# 572 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "PlcParser.fsy"
                                                        Prim1 ("tl", _2)   
                   )
# 95 "PlcParser.fsy"
                 : Absyn.expr));
# 583 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "PlcParser.fsy"
                                                        Prim1 ("ise", _2)    
                   )
# 96 "PlcParser.fsy"
                 : Absyn.expr));
# 594 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "PlcParser.fsy"
                                                        Prim1 ("print", _2)  
                   )
# 97 "PlcParser.fsy"
                 : Absyn.expr));
# 605 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "PlcParser.fsy"
                                                        Prim2 ("+", _1, _3)  
                   )
# 98 "PlcParser.fsy"
                 : Absyn.expr));
# 617 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PlcParser.fsy"
                                                        Prim2 ("-", _1, _3)  
                   )
# 99 "PlcParser.fsy"
                 : Absyn.expr));
# 629 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PlcParser.fsy"
                                                        Prim2 ("*", _1, _3)  
                   )
# 100 "PlcParser.fsy"
                 : Absyn.expr));
# 641 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PlcParser.fsy"
                                                        Prim2 ("/", _1, _3)  
                   )
# 101 "PlcParser.fsy"
                 : Absyn.expr));
# 653 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "PlcParser.fsy"
                                                        Prim2 ("=", _1, _3)  
                   )
# 102 "PlcParser.fsy"
                 : Absyn.expr));
# 665 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "PlcParser.fsy"
                                                        Prim2 ("!=", _1, _3) 
                   )
# 103 "PlcParser.fsy"
                 : Absyn.expr));
# 677 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "PlcParser.fsy"
                                                        Prim2 ("<", _1, _3)  
                   )
# 104 "PlcParser.fsy"
                 : Absyn.expr));
# 689 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "PlcParser.fsy"
                                                        Prim2 ("<=", _1, _3) 
                   )
# 105 "PlcParser.fsy"
                 : Absyn.expr));
# 701 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "PlcParser.fsy"
                                                        Prim2 ("&&", _1, _3) 
                   )
# 106 "PlcParser.fsy"
                 : Absyn.expr));
# 713 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "PlcParser.fsy"
                                                        Prim2 ("::", _1, _3) 
                   )
# 107 "PlcParser.fsy"
                 : Absyn.expr));
# 725 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "PlcParser.fsy"
                                                        Prim2 (";", _1, _3)  
                   )
# 108 "PlcParser.fsy"
                 : Absyn.expr));
# 737 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "PlcParser.fsy"
                                                        Item (_3, _1)        
                   )
# 109 "PlcParser.fsy"
                 : Absyn.expr));
# 749 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "PlcParser.fsy"
                                                               _1             
                   )
# 113 "PlcParser.fsy"
                 : Absyn.expr));
# 760 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "PlcParser.fsy"
                                                               Var _1         
                   )
# 114 "PlcParser.fsy"
                 : Absyn.expr));
# 771 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "PlcParser.fsy"
                                                               _2             
                   )
# 115 "PlcParser.fsy"
                 : Absyn.expr));
# 782 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "PlcParser.fsy"
                                                               _2             
                   )
# 116 "PlcParser.fsy"
                 : Absyn.expr));
# 793 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "PlcParser.fsy"
                                                               List _2        
                   )
# 117 "PlcParser.fsy"
                 : Absyn.expr));
# 804 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "PlcParser.fsy"
                                                               makeAnon _2 _4 
                   )
# 118 "PlcParser.fsy"
                 : Absyn.expr));
# 816 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "PlcParser.fsy"
                                                               Call (_1, _2) 
                   )
# 122 "PlcParser.fsy"
                 : Absyn.expr));
# 828 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "PlcParser.fsy"
                                                               Call (_1, _2) 
                   )
# 123 "PlcParser.fsy"
                 : Absyn.expr));
# 840 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "PlcParser.fsy"
                                                               ConB (_1)    
                   )
# 127 "PlcParser.fsy"
                 : Absyn.expr));
# 851 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "PlcParser.fsy"
                                                               ConI (_1)    
                   )
# 128 "PlcParser.fsy"
                 : Absyn.expr));
# 862 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "PlcParser.fsy"
                                                               List []      
                   )
# 129 "PlcParser.fsy"
                 : Absyn.expr));
# 872 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "PlcParser.fsy"
                                                               ESeq _2      
                   )
# 130 "PlcParser.fsy"
                 : Absyn.expr));
# 883 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "PlcParser.fsy"
                                                   [_1; _3] 
                   )
# 134 "PlcParser.fsy"
                 : 'Comps));
# 895 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "PlcParser.fsy"
                                                   _1 :: _3 
                   )
# 135 "PlcParser.fsy"
                 : 'Comps));
# 907 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "PlcParser.fsy"
                                                              []                        
                   )
# 139 "PlcParser.fsy"
                 : 'MatchExpr));
# 917 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CondExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'MatchExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "PlcParser.fsy"
                                                              List.append [(_2, _4)] _5 
                   )
# 140 "PlcParser.fsy"
                 : 'MatchExpr));
# 930 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "PlcParser.fsy"
                                                    Some (_1) 
                   )
# 144 "PlcParser.fsy"
                 : 'CondExpr));
# 941 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "PlcParser.fsy"
                                                    None      
                   )
# 145 "PlcParser.fsy"
                 : 'CondExpr));
# 951 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "PlcParser.fsy"
                                               []   
                   )
# 149 "PlcParser.fsy"
                 : 'Args));
# 961 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "PlcParser.fsy"
                                               _2   
                   )
# 150 "PlcParser.fsy"
                 : 'Args));
# 972 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "PlcParser.fsy"
                                                    _1 :: [] 
                   )
# 154 "PlcParser.fsy"
                 : 'Params));
# 983 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "PlcParser.fsy"
                                                    _1 :: _3 
                   )
# 155 "PlcParser.fsy"
                 : 'Params));
# 995 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "PlcParser.fsy"
                                      (_1, _2) 
                   )
# 159 "PlcParser.fsy"
                 : 'TypedVar));
# 1007 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "PlcParser.fsy"
                                                    _1            
                   )
# 163 "PlcParser.fsy"
                 : 'Type));
# 1018 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "PlcParser.fsy"
                                                    ListT (_2)    
                   )
# 164 "PlcParser.fsy"
                 : 'Type));
# 1029 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "PlcParser.fsy"
                                                    SeqT (_2)     
                   )
# 165 "PlcParser.fsy"
                 : 'Type));
# 1040 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "PlcParser.fsy"
                                                    FunT (_1, _3) 
                   )
# 166 "PlcParser.fsy"
                 : 'Type));
# 1052 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "PlcParser.fsy"
                                               ListT [] 
                   )
# 170 "PlcParser.fsy"
                 : 'AtomicType));
# 1062 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "PlcParser.fsy"
                                               BoolT    
                   )
# 171 "PlcParser.fsy"
                 : 'AtomicType));
# 1072 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "PlcParser.fsy"
                                               IntT     
                   )
# 172 "PlcParser.fsy"
                 : 'AtomicType));
# 1082 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "PlcParser.fsy"
                                               _2       
                   )
# 173 "PlcParser.fsy"
                 : 'AtomicType));
# 1093 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "PlcParser.fsy"
                                                   [_1; _3] 
                   )
# 177 "PlcParser.fsy"
                 : 'Types));
# 1105 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "PlcParser.fsy"
                                                   _1 :: _3 
                   )
# 178 "PlcParser.fsy"
                 : 'Types));
|]
# 1118 "PlcParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
