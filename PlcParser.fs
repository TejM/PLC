// Implementation file for parser generated by fsyacc
module PlcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PlcParser.fsy"

 open Absyn
 open ParAux

# 11 "PlcParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | COLON
  | SEMIC
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | EQ
  | NEQ
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | PRINT
  | CONS
  | HEAD
  | TAIL
  | ISE
  | NOT
  | AND
  | MATCH
  | WITH
  | PIPE
  | UNDERSCORE
  | IF
  | THEN
  | ELSE
  | VAR
  | FUN
  | REC
  | DARROW
  | FN
  | END
  | NIL
  | BOOL
  | INT
  | ARROW
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMIC
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PRINT
    | TOKEN_CONS
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_ISE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_PIPE
    | TOKEN_UNDERSCORE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_DARROW
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_NIL
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_ARROW
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_Decl
    | NONTERM_Expr
    | NONTERM_AtomicExpr
    | NONTERM_AppExpr
    | NONTERM_Const
    | NONTERM_Comps
    | NONTERM_MatchExpr
    | NONTERM_CondExpr
    | NONTERM_Args
    | NONTERM_Params
    | NONTERM_TypedVar
    | NONTERM_Type
    | NONTERM_AtomicType
    | NONTERM_Types

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | COLON  -> 2 
  | SEMIC  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | LBRACE  -> 6 
  | RBRACE  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | EQ  -> 10 
  | NEQ  -> 11 
  | LT  -> 12 
  | LTE  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | TIMES  -> 16 
  | DIV  -> 17 
  | PRINT  -> 18 
  | CONS  -> 19 
  | HEAD  -> 20 
  | TAIL  -> 21 
  | ISE  -> 22 
  | NOT  -> 23 
  | AND  -> 24 
  | MATCH  -> 25 
  | WITH  -> 26 
  | PIPE  -> 27 
  | UNDERSCORE  -> 28 
  | IF  -> 29 
  | THEN  -> 30 
  | ELSE  -> 31 
  | VAR  -> 32 
  | FUN  -> 33 
  | REC  -> 34 
  | DARROW  -> 35 
  | FN  -> 36 
  | END  -> 37 
  | NIL  -> 38 
  | BOOL  -> 39 
  | INT  -> 40 
  | ARROW  -> 41 
  | CSTBOOL _ -> 42 
  | NAME _ -> 43 
  | CSTINT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_COLON 
  | 3 -> TOKEN_SEMIC 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_LBRACE 
  | 7 -> TOKEN_RBRACE 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_NEQ 
  | 12 -> TOKEN_LT 
  | 13 -> TOKEN_LTE 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIV 
  | 18 -> TOKEN_PRINT 
  | 19 -> TOKEN_CONS 
  | 20 -> TOKEN_HEAD 
  | 21 -> TOKEN_TAIL 
  | 22 -> TOKEN_ISE 
  | 23 -> TOKEN_NOT 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_MATCH 
  | 26 -> TOKEN_WITH 
  | 27 -> TOKEN_PIPE 
  | 28 -> TOKEN_UNDERSCORE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_THEN 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_VAR 
  | 33 -> TOKEN_FUN 
  | 34 -> TOKEN_REC 
  | 35 -> TOKEN_DARROW 
  | 36 -> TOKEN_FN 
  | 37 -> TOKEN_END 
  | 38 -> TOKEN_NIL 
  | 39 -> TOKEN_BOOL 
  | 40 -> TOKEN_INT 
  | 41 -> TOKEN_ARROW 
  | 42 -> TOKEN_CSTBOOL 
  | 43 -> TOKEN_NAME 
  | 44 -> TOKEN_CSTINT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_Decl 
    | 5 -> NONTERM_Decl 
    | 6 -> NONTERM_Decl 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_AtomicExpr 
    | 29 -> NONTERM_AtomicExpr 
    | 30 -> NONTERM_AtomicExpr 
    | 31 -> NONTERM_AtomicExpr 
    | 32 -> NONTERM_AtomicExpr 
    | 33 -> NONTERM_AtomicExpr 
    | 34 -> NONTERM_AppExpr 
    | 35 -> NONTERM_AppExpr 
    | 36 -> NONTERM_Const 
    | 37 -> NONTERM_Const 
    | 38 -> NONTERM_Const 
    | 39 -> NONTERM_Const 
    | 40 -> NONTERM_Comps 
    | 41 -> NONTERM_Comps 
    | 42 -> NONTERM_MatchExpr 
    | 43 -> NONTERM_MatchExpr 
    | 44 -> NONTERM_CondExpr 
    | 45 -> NONTERM_CondExpr 
    | 46 -> NONTERM_Args 
    | 47 -> NONTERM_Args 
    | 48 -> NONTERM_Params 
    | 49 -> NONTERM_Params 
    | 50 -> NONTERM_TypedVar 
    | 51 -> NONTERM_Type 
    | 52 -> NONTERM_Type 
    | 53 -> NONTERM_Type 
    | 54 -> NONTERM_Type 
    | 55 -> NONTERM_AtomicType 
    | 56 -> NONTERM_AtomicType 
    | 57 -> NONTERM_AtomicType 
    | 58 -> NONTERM_AtomicType 
    | 59 -> NONTERM_Types 
    | 60 -> NONTERM_Types 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMIC  -> "SEMIC" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PRINT  -> "PRINT" 
  | CONS  -> "CONS" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | ISE  -> "ISE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | PIPE  -> "PIPE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | DARROW  -> "DARROW" 
  | FN  -> "FN" 
  | END  -> "END" 
  | NIL  -> "NIL" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | ARROW  -> "ARROW" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMIC  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 4us; 65535us; 0us; 2us; 6us; 7us; 9us; 10us; 81us; 82us; 4us; 65535us; 0us; 8us; 6us; 8us; 9us; 8us; 81us; 8us; 33us; 65535us; 0us; 5us; 6us; 4us; 9us; 5us; 13us; 14us; 18us; 19us; 25us; 26us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 66us; 51us; 67us; 52us; 68us; 53us; 69us; 54us; 70us; 55us; 71us; 56us; 72us; 57us; 73us; 58us; 74us; 59us; 75us; 60us; 81us; 5us; 84us; 61us; 85us; 61us; 91us; 62us; 104us; 63us; 107us; 65us; 109us; 64us; 35us; 65535us; 0us; 27us; 6us; 27us; 9us; 27us; 13us; 27us; 18us; 27us; 25us; 27us; 27us; 93us; 28us; 94us; 29us; 27us; 31us; 27us; 33us; 27us; 35us; 27us; 39us; 27us; 41us; 27us; 43us; 27us; 45us; 27us; 47us; 27us; 49us; 27us; 66us; 27us; 67us; 27us; 68us; 27us; 69us; 27us; 70us; 27us; 71us; 27us; 72us; 27us; 73us; 27us; 74us; 27us; 75us; 27us; 81us; 27us; 84us; 27us; 85us; 27us; 91us; 27us; 104us; 27us; 107us; 27us; 109us; 27us; 33us; 65535us; 0us; 28us; 6us; 28us; 9us; 28us; 13us; 28us; 18us; 28us; 25us; 28us; 29us; 28us; 31us; 28us; 33us; 28us; 35us; 28us; 39us; 28us; 41us; 28us; 43us; 28us; 45us; 28us; 47us; 28us; 49us; 28us; 66us; 28us; 67us; 28us; 68us; 28us; 69us; 28us; 70us; 28us; 71us; 28us; 72us; 28us; 73us; 28us; 74us; 28us; 75us; 28us; 81us; 28us; 84us; 28us; 85us; 28us; 91us; 28us; 104us; 28us; 107us; 28us; 109us; 28us; 36us; 65535us; 0us; 79us; 6us; 79us; 9us; 79us; 13us; 79us; 18us; 79us; 25us; 79us; 27us; 79us; 28us; 79us; 29us; 79us; 31us; 79us; 33us; 79us; 35us; 79us; 39us; 79us; 41us; 79us; 43us; 79us; 45us; 79us; 47us; 79us; 49us; 79us; 66us; 79us; 67us; 79us; 68us; 79us; 69us; 79us; 70us; 79us; 71us; 79us; 72us; 79us; 73us; 79us; 74us; 79us; 75us; 79us; 76us; 77us; 81us; 79us; 84us; 79us; 85us; 79us; 91us; 79us; 104us; 79us; 107us; 79us; 109us; 79us; 3us; 65535us; 84us; 87us; 85us; 87us; 104us; 105us; 2us; 65535us; 37us; 38us; 64us; 110us; 1us; 65535us; 107us; 108us; 3us; 65535us; 16us; 17us; 21us; 22us; 89us; 90us; 2us; 65535us; 112us; 114us; 117us; 118us; 2us; 65535us; 112us; 116us; 117us; 116us; 10us; 65535us; 23us; 24us; 84us; 99us; 85us; 100us; 97us; 99us; 112us; 119us; 117us; 119us; 122us; 129us; 125us; 126us; 131us; 128us; 136us; 130us; 10us; 65535us; 23us; 121us; 84us; 121us; 85us; 121us; 97us; 121us; 112us; 121us; 117us; 121us; 122us; 121us; 125us; 121us; 131us; 121us; 136us; 121us; 3us; 65535us; 85us; 123us; 122us; 123us; 136us; 137us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 8us; 13us; 47us; 83us; 117us; 154us; 158us; 161us; 163us; 167us; 170us; 173us; 184us; 195us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 13us; 2us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 12us; 2us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 2us; 2us; 26us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 12us; 4us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 5us; 12us; 5us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 54us; 1us; 6us; 12us; 6us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 2us; 7us; 34us; 2us; 8us; 35us; 1us; 9us; 12us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 9us; 12us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 9us; 12us; 9us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 10us; 12us; 10us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 10us; 1us; 10us; 1us; 11us; 12us; 11us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 12us; 12us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 13us; 12us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 14us; 12us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 15us; 12us; 15us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 16us; 12us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 31us; 40us; 41us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 33us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 40us; 40us; 41us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 43us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 44us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 4us; 31us; 32us; 38us; 39us; 6us; 31us; 32us; 38us; 39us; 52us; 58us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 2us; 38us; 39us; 1us; 38us; 2us; 39us; 54us; 5us; 39us; 54us; 58us; 59us; 60us; 1us; 39us; 1us; 39us; 1us; 39us; 2us; 40us; 41us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 45us; 2us; 46us; 47us; 1us; 46us; 1us; 47us; 1us; 47us; 2us; 48us; 49us; 1us; 49us; 1us; 49us; 2us; 50us; 54us; 1us; 50us; 1us; 51us; 2us; 52us; 58us; 1us; 52us; 1us; 52us; 1us; 53us; 2us; 53us; 54us; 1us; 53us; 2us; 54us; 54us; 4us; 54us; 58us; 59us; 60us; 4us; 54us; 59us; 59us; 60us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 2us; 59us; 60us; 1us; 60us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 22us; 35us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 65us; 68us; 70us; 72us; 74us; 87us; 89us; 91us; 93us; 95us; 98us; 100us; 113us; 116us; 119us; 121us; 134us; 136us; 149us; 151us; 164us; 166us; 179us; 181us; 183us; 185us; 198us; 200us; 213us; 215us; 228us; 230us; 243us; 245us; 258us; 260us; 273us; 286us; 299us; 312us; 325us; 338us; 351us; 364us; 377us; 390us; 403us; 418us; 431us; 446us; 459us; 472us; 474us; 476us; 478us; 480us; 482us; 484us; 486us; 488us; 490us; 492us; 494us; 496us; 498us; 500us; 502us; 504us; 506us; 508us; 513us; 520us; 522us; 524us; 526us; 528us; 530us; 532us; 534us; 536us; 538us; 540us; 542us; 545us; 547us; 550us; 556us; 558us; 560us; 562us; 565us; 567us; 569us; 571us; 573us; 575us; 577us; 579us; 582us; 584us; 586us; 588us; 591us; 593us; 595us; 598us; 600us; 602us; 605us; 607us; 609us; 611us; 614us; 616us; 619us; 624us; 629us; 631us; 633us; 635us; 637us; 639us; 642us; |]
let _fsyacc_action_rows = 138
let _fsyacc_actionTableElements = [|16us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 32us; 11us; 33us; 15us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 11us; 16410us; 3us; 6us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 11us; 32768us; 3us; 6us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 16us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 32us; 11us; 33us; 15us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 0us; 16386us; 1us; 32768us; 3us; 9us; 16us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 32us; 11us; 33us; 15us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 0us; 16387us; 1us; 32768us; 43us; 12us; 1us; 32768us; 10us; 13us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 10us; 16388us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 2us; 32768us; 34us; 20us; 43us; 16us; 1us; 32768us; 4us; 112us; 1us; 32768us; 10us; 18us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 10us; 16389us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 1us; 32768us; 43us; 21us; 1us; 32768us; 4us; 112us; 1us; 32768us; 2us; 23us; 5us; 32768us; 4us; 122us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 2us; 32768us; 10us; 25us; 41us; 131us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 10us; 16390us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 6us; 16391us; 4us; 84us; 6us; 81us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 6us; 16392us; 4us; 84us; 6us; 81us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 12us; 32768us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 30us; 31us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 12us; 32768us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 31us; 33us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 10us; 16393us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 12us; 32768us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 26us; 37us; 2us; 32768us; 27us; 107us; 37us; 106us; 0us; 16394us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 1us; 16395us; 8us; 76us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 3us; 16396us; 8us; 76us; 16us; 68us; 17us; 69us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 1us; 16397us; 8us; 76us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 1us; 16398us; 8us; 76us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 1us; 16399us; 8us; 76us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 1us; 16400us; 8us; 76us; 3us; 16401us; 8us; 76us; 16us; 68us; 17us; 69us; 3us; 16402us; 8us; 76us; 16us; 68us; 17us; 69us; 1us; 16403us; 8us; 76us; 1us; 16404us; 8us; 76us; 8us; 16405us; 8us; 76us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 8us; 16406us; 8us; 76us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 6us; 16407us; 8us; 76us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 6us; 16408us; 8us; 76us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 6us; 16409us; 8us; 76us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 11us; 16410us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 13us; 32768us; 1us; 104us; 3us; 75us; 5us; 86us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 12us; 32768us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 37us; 92us; 12us; 16424us; 1us; 104us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 13us; 32768us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 27us; 107us; 37us; 106us; 11us; 16428us; 3us; 75us; 8us; 76us; 10us; 70us; 11us; 71us; 12us; 72us; 13us; 73us; 14us; 66us; 15us; 67us; 16us; 68us; 17us; 69us; 19us; 74us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 3us; 32768us; 4us; 97us; 42us; 95us; 44us; 96us; 1us; 32768us; 9us; 78us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 16us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 32us; 11us; 33us; 15us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 1us; 32768us; 7us; 83us; 0us; 16414us; 19us; 32768us; 4us; 85us; 5us; 98us; 6us; 81us; 8us; 125us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 38us; 132us; 39us; 133us; 40us; 134us; 42us; 95us; 43us; 80us; 44us; 96us; 19us; 32768us; 4us; 85us; 5us; 98us; 6us; 81us; 8us; 125us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 38us; 132us; 39us; 133us; 40us; 134us; 42us; 95us; 43us; 80us; 44us; 96us; 0us; 16415us; 1us; 32768us; 5us; 88us; 0us; 16416us; 1us; 32768us; 4us; 112us; 1us; 32768us; 35us; 91us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 6us; 32768us; 4us; 122us; 5us; 98us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 0us; 16422us; 2us; 32768us; 8us; 101us; 41us; 131us; 4us; 32768us; 1us; 136us; 5us; 135us; 8us; 101us; 41us; 131us; 1us; 32768us; 9us; 102us; 1us; 32768us; 5us; 103us; 0us; 16423us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 0us; 16425us; 0us; 16426us; 15us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 28us; 111us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 1us; 32768us; 41us; 109us; 14us; 32768us; 4us; 84us; 6us; 81us; 15us; 41us; 18us; 49us; 20us; 43us; 21us; 45us; 22us; 47us; 23us; 39us; 25us; 35us; 29us; 29us; 36us; 89us; 42us; 95us; 43us; 80us; 44us; 96us; 0us; 16427us; 0us; 16429us; 6us; 32768us; 4us; 122us; 5us; 113us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 0us; 16430us; 1us; 32768us; 5us; 115us; 0us; 16431us; 1us; 16432us; 1us; 117us; 5us; 32768us; 4us; 122us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 0us; 16433us; 2us; 32768us; 41us; 131us; 43us; 120us; 0us; 16434us; 0us; 16435us; 5us; 32768us; 4us; 122us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 1us; 32768us; 5us; 124us; 0us; 16436us; 5us; 32768us; 4us; 122us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 2us; 32768us; 9us; 127us; 41us; 131us; 0us; 16437us; 1us; 16438us; 41us; 131us; 3us; 32768us; 1us; 136us; 5us; 135us; 41us; 131us; 2us; 16443us; 1us; 136us; 41us; 131us; 5us; 32768us; 4us; 122us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 5us; 32768us; 4us; 122us; 8us; 125us; 38us; 132us; 39us; 133us; 40us; 134us; 0us; 16444us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 20us; 21us; 33us; 45us; 62us; 63us; 65us; 82us; 83us; 85us; 87us; 102us; 113us; 116us; 118us; 120us; 135us; 146us; 148us; 150us; 152us; 158us; 161us; 176us; 187us; 194us; 201us; 216us; 229us; 244us; 257us; 272us; 283us; 298us; 311us; 314us; 315us; 330us; 332us; 347us; 351us; 366us; 368us; 383us; 385us; 400us; 402us; 417us; 419us; 423us; 427us; 429us; 431us; 440us; 449us; 456us; 463us; 470us; 482us; 496us; 509us; 522us; 536us; 548us; 563us; 578us; 593us; 608us; 623us; 638us; 653us; 668us; 683us; 698us; 702us; 704us; 705us; 706us; 707us; 724us; 726us; 727us; 747us; 767us; 768us; 770us; 771us; 773us; 775us; 790us; 791us; 792us; 793us; 794us; 795us; 802us; 803us; 806us; 811us; 813us; 815us; 816us; 831us; 832us; 833us; 849us; 851us; 866us; 867us; 868us; 875us; 876us; 878us; 879us; 881us; 887us; 888us; 891us; 892us; 893us; 899us; 901us; 902us; 908us; 911us; 912us; 914us; 918us; 921us; 927us; 928us; 929us; 930us; 931us; 937us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 4us; 5us; 8us; 1us; 1us; 6us; 4us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 1us; 1us; 3us; 3us; 3us; 5us; 2us; 2us; 1us; 1us; 2us; 5us; 3us; 3us; 1us; 5us; 1us; 1us; 2us; 3us; 1us; 3us; 2us; 1us; 3us; 3us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 16us; 16us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 16416us; 65535us; 65535us; 65535us; 16417us; 16418us; 16419us; 16420us; 16421us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 16425us; 16426us; 65535us; 65535us; 65535us; 16427us; 16429us; 65535us; 16430us; 65535us; 16431us; 65535us; 65535us; 16433us; 65535us; 16434us; 16435us; 65535us; 65535us; 16436us; 65535us; 65535us; 16437us; 65535us; 65535us; 65535us; 65535us; 16439us; 16440us; 16441us; 16442us; 65535us; 16444us; |]
let _fsyacc_reductions ()  =    [| 
# 406 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 415 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "PlcParser.fsy"
                                                         _1                  
                   )
# 70 "PlcParser.fsy"
                 : Absyn.expr));
# 426 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "PlcParser.fsy"
                                                                               
                   )
# 74 "PlcParser.fsy"
                 : 'Prog));
# 438 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "PlcParser.fsy"
                                                                               
                   )
# 75 "PlcParser.fsy"
                 : 'Prog));
# 450 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "PlcParser.fsy"
                                                                                       
                   )
# 79 "PlcParser.fsy"
                 : 'Decl));
# 462 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "PlcParser.fsy"
                                                                   Let (_2, _3, _5)    
                   )
# 80 "PlcParser.fsy"
                 : 'Decl));
# 475 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "PlcParser.fsy"
                                                                   makeFun _3 _4 _6 _8 
                   )
# 81 "PlcParser.fsy"
                 : 'Decl));
# 489 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "PlcParser.fsy"
                                                        _1                   
                   )
# 85 "PlcParser.fsy"
                 : Absyn.expr));
# 500 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "PlcParser.fsy"
                                                        _1                   
                   )
# 86 "PlcParser.fsy"
                 : Absyn.expr));
# 511 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "PlcParser.fsy"
                                                        If (_2, _4, _6)      
                   )
# 87 "PlcParser.fsy"
                 : Absyn.expr));
# 524 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'MatchExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PlcParser.fsy"
                                                        Match (_2, _4)       
                   )
# 88 "PlcParser.fsy"
                 : Absyn.expr));
# 536 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PlcParser.fsy"
                                                        Prim1 ("!", _2)      
                   )
# 89 "PlcParser.fsy"
                 : Absyn.expr));
# 547 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "PlcParser.fsy"
                                                        Prim1 ("-", _2)      
                   )
# 90 "PlcParser.fsy"
                 : Absyn.expr));
# 558 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "PlcParser.fsy"
                                                        Prim1 ("head", _2)   
                   )
# 91 "PlcParser.fsy"
                 : Absyn.expr));
# 569 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PlcParser.fsy"
                                                        Prim1 ("tail", _2)   
                   )
# 92 "PlcParser.fsy"
                 : Absyn.expr));
# 580 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PlcParser.fsy"
                                                        Prim1 ("ise", _2)    
                   )
# 93 "PlcParser.fsy"
                 : Absyn.expr));
# 591 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "PlcParser.fsy"
                                                        Prim1 ("print", _2)  
                   )
# 94 "PlcParser.fsy"
                 : Absyn.expr));
# 602 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "PlcParser.fsy"
                                                        Prim2 ("+", _1, _3)  
                   )
# 95 "PlcParser.fsy"
                 : Absyn.expr));
# 614 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "PlcParser.fsy"
                                                        Prim2 ("-", _1, _3)  
                   )
# 96 "PlcParser.fsy"
                 : Absyn.expr));
# 626 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "PlcParser.fsy"
                                                        Prim2 ("*", _1, _3)  
                   )
# 97 "PlcParser.fsy"
                 : Absyn.expr));
# 638 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "PlcParser.fsy"
                                                        Prim2 ("/", _1, _3)  
                   )
# 98 "PlcParser.fsy"
                 : Absyn.expr));
# 650 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PlcParser.fsy"
                                                        Prim2 ("=", _1, _3)  
                   )
# 99 "PlcParser.fsy"
                 : Absyn.expr));
# 662 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PlcParser.fsy"
                                                        Prim2 ("!=", _1, _3) 
                   )
# 100 "PlcParser.fsy"
                 : Absyn.expr));
# 674 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PlcParser.fsy"
                                                        Prim2 ("<", _1, _3)  
                   )
# 101 "PlcParser.fsy"
                 : Absyn.expr));
# 686 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "PlcParser.fsy"
                                                        Prim2 ("<=", _1, _3) 
                   )
# 102 "PlcParser.fsy"
                 : Absyn.expr));
# 698 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "PlcParser.fsy"
                                                        Prim2 ("::", _1, _3) 
                   )
# 103 "PlcParser.fsy"
                 : Absyn.expr));
# 710 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "PlcParser.fsy"
                                                        Prim2 (";", _1, _3)  
                   )
# 104 "PlcParser.fsy"
                 : Absyn.expr));
# 722 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "PlcParser.fsy"
                                                        Item (_1, _3)        
                   )
# 105 "PlcParser.fsy"
                 : Absyn.expr));
# 734 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "PlcParser.fsy"
                                                               _1             
                   )
# 109 "PlcParser.fsy"
                 : Absyn.expr));
# 745 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "PlcParser.fsy"
                                                               Var _1         
                   )
# 110 "PlcParser.fsy"
                 : Absyn.expr));
# 756 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "PlcParser.fsy"
                                                               {_2}           
                   )
# 111 "PlcParser.fsy"
                 : Absyn.expr));
# 767 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "PlcParser.fsy"
                                                               (_2)           
                   )
# 112 "PlcParser.fsy"
                 : Absyn.expr));
# 778 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "PlcParser.fsy"
                                                               List _2        
                   )
# 113 "PlcParser.fsy"
                 : Absyn.expr));
# 789 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "PlcParser.fsy"
                                                               makeAnon _2 _4 
                   )
# 114 "PlcParser.fsy"
                 : Absyn.expr));
# 801 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "PlcParser.fsy"
                                                               Call (_1, _2) 
                   )
# 118 "PlcParser.fsy"
                 : Absyn.expr));
# 813 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "PlcParser.fsy"
                                                               Call (_1, _2) 
                   )
# 119 "PlcParser.fsy"
                 : Absyn.expr));
# 825 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "PlcParser.fsy"
                                                               ConB (_1)    
                   )
# 123 "PlcParser.fsy"
                 : Absyn.expr));
# 836 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "PlcParser.fsy"
                                                               ConI (_1)    
                   )
# 124 "PlcParser.fsy"
                 : Absyn.expr));
# 847 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "PlcParser.fsy"
                                                               List []      
                   )
# 125 "PlcParser.fsy"
                 : Absyn.expr));
# 857 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "PlcParser.fsy"
                                                               ESeq (_2 []) 
                   )
# 126 "PlcParser.fsy"
                 : Absyn.expr));
# 868 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "PlcParser.fsy"
                                                   [_1; _3] 
                   )
# 130 "PlcParser.fsy"
                 : 'Comps));
# 880 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "PlcParser.fsy"
                                                   _1 :: _3 
                   )
# 131 "PlcParser.fsy"
                 : 'Comps));
# 892 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "PlcParser.fsy"
                                                                                 
                   )
# 135 "PlcParser.fsy"
                 : 'MatchExpr));
# 902 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CondExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'MatchExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "PlcParser.fsy"
                                                              [(_2), _4] :: [_5] 
                   )
# 136 "PlcParser.fsy"
                 : 'MatchExpr));
# 915 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "PlcParser.fsy"
                                                    Some (_1) 
                   )
# 140 "PlcParser.fsy"
                 : 'CondExpr));
# 926 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "PlcParser.fsy"
                                                    None      
                   )
# 141 "PlcParser.fsy"
                 : 'CondExpr));
# 936 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "PlcParser.fsy"
                                               []   
                   )
# 145 "PlcParser.fsy"
                 : 'Args));
# 946 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "PlcParser.fsy"
                                               _2   
                   )
# 146 "PlcParser.fsy"
                 : 'Args));
# 957 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "PlcParser.fsy"
                                                    _1 :: [] 
                   )
# 150 "PlcParser.fsy"
                 : 'Params));
# 968 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "PlcParser.fsy"
                                                    _1 :: _3 
                   )
# 151 "PlcParser.fsy"
                 : 'Params));
# 980 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "PlcParser.fsy"
                                      (_1, _2) 
                   )
# 155 "PlcParser.fsy"
                 : 'TypedVar));
# 992 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "PlcParser.fsy"
                                                    _1            
                   )
# 159 "PlcParser.fsy"
                 : 'Type));
# 1003 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "PlcParser.fsy"
                                                    ListT (_2)    
                   )
# 160 "PlcParser.fsy"
                 : 'Type));
# 1014 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "PlcParser.fsy"
                                                    SeqT (_2)     
                   )
# 161 "PlcParser.fsy"
                 : 'Type));
# 1025 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "PlcParser.fsy"
                                                    FunT (_1, _2) 
                   )
# 162 "PlcParser.fsy"
                 : 'Type));
# 1037 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "PlcParser.fsy"
                                               ListT [] 
                   )
# 166 "PlcParser.fsy"
                 : 'AtomicType));
# 1047 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "PlcParser.fsy"
                                               BoolT    
                   )
# 167 "PlcParser.fsy"
                 : 'AtomicType));
# 1057 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "PlcParser.fsy"
                                               IntT     
                   )
# 168 "PlcParser.fsy"
                 : 'AtomicType));
# 1067 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "PlcParser.fsy"
                                               _2       
                   )
# 169 "PlcParser.fsy"
                 : 'AtomicType));
# 1078 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "PlcParser.fsy"
                                                   [_1; _3] 
                   )
# 173 "PlcParser.fsy"
                 : 'Types));
# 1090 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "PlcParser.fsy"
                                                   _1 :: _3 
                   )
# 174 "PlcParser.fsy"
                 : 'Types));
|]
# 1103 "PlcParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
