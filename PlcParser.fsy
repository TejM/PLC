%{
 open Absyn
 open ParAux
%}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL

/*      Nil  Bool  Int   ->     */
%token  NIL  BOOL  INT  ARROW

/*      =>      fn  end  */
%token  DARROW  FN  END

/*      var  fun  rec  */
%token  VAR  FUN  REC

/*      if  then  else  */
%token  IF  THEN  ELSE

/*      match  with  |     _          */
%token  MATCH  WITH  PIPE  UNDERSCORE

/*      !    &&   */
%token  NOT  AND

/*      ::    hd    tl    ise  */
%token  CONS  HEAD  TAIL  ISE

/*      print  */
%token  PRINT

/*      +     -      *      /     */
%token  PLUS  MINUS  TIMES  DIV

/*      =   !=   <   <=   */
%token  EQ  NEQ  LT  LTE

/*      (     )     {       }       [       ]       */
%token  LPAR  RPAR  LBRACE  RBRACE  LBRACK  RBRACK

/*      ,      :      ;      */
%token  COMMA  COLON  SEMIC

%token EOF


%right SEMIC ARROW
%nonassoc IF MATCH
%left ELSE
%left AND
%left EQ NEQ
%left LT LTE
%right CONS
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HEAD TAIL ISE PRINT NAME
%left LBRACK

%start Main
%type <Absyn.expr> Main

%%

/*  Add production rules below */

Prog :
    <expr> 
  | <decl> ; <prog>
;

Decl :
    var <name> = <expr>
  | fun <name> <args> = <expr>
  | fun rec <name> <args> : <type> = <expr>
;

Expr :
    <atomic expr> atomic expression
  | <app expr> function application
  | if <expr> then <expr> else <expr> conditional expression
  | match <expr> with <matchexpr> match expression
  | ! <expr> unary operator application
  | - <expr>
  | hd <expr>
  | tl <expr>
  | ise <expr>
  | print <expr>
  | <expr> + <expr> binary operator application
  | <expr> - <expr>
  | <expr> * <expr>
  | <expr> / <expr>
  | <expr> = <expr>
  | <expr> != <expr>
  | <expr> < <expr>
  | <expr> <= <expr>
  | <expr> :: <expr>
  | <expr> ; <expr>
  | <expr> [ <nat> ]

AtomicExpr :
    <const> constant literal
  | <name> function, variable or parameter name
  | { <prog> } local scope block
  | ( <expr> ) parenthesized expression
  | ( <comps> ) list
  | fn <args> => <expr> end anonymous function

AppExpr : function application
    <atomic expr> <atomic expr>
  | <app expr> <atomic expr>

Const :
    true 
  | false
  | <nat> numerals
  | ( ) unit value
  | ( <type> [ ] ) type-annotated empty sequence

Comps : list components
    <expr> , <expr>
  | <expr> , <comps>

MatchExpr : match cases
    end
  | ‘|’ <condexpr> -> <expr> <matchexpr>

CondExpr : values to be matched against
    <expr>
  | ‘_’

Args : function arguments
    ( )
  | ...

Type :
    <atomic type>
  | ( <types> ) list type
  | [ <type> ] sequence type
  | <type> -> <type> function type

AtomicType :
    Nil Nil type
  | Bool Boolean type
  | Int integer type
  | ( <type> )

Types :
    <type> , <type>
  | <type> , <types>